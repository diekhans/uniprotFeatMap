#!/usr/bin/env python3

import sys
import os.path as osp
import multiprocessing as mp
import logging
import pipettor
from pycbio.sys import fileOps, cli
from pycbio.hgdata.decoration import BedBlock

sys.path.insert(0, osp.normpath(osp.join(osp.dirname(__file__), "../lib")))
from uniprotmap import OutOfSyncError
from uniprotmap.interproscan import interproAnnotsLoad
from uniprotmap.interproDecorators import InterproDecoration, AnnotCategory, INTERPRO_COLOR, OTHER_COLOR
from uniprotmap.metadata import xrefToItemArgs
from uniprotmap.annotMappings import transAnnotMappingReader
from uniprotmap.decoratorsBuilder import buildDecorators

def parseArgs():
    desc = """
    Convert InterproScan annotations alignments create by interproAnnotsMap
    to a decorator BED file in interproDecoration.as format.  Possibly filtering
    the results.
    """
    parser = cli.ArgumentParserExtras(description=desc)
    parser.add_argument("--nprocs", type=int, default=1,
                        help="""number of processers to use""")
    parser.add_argument("--featTypesTsv",
                        help="""unique category and feature types for constructing track filters (output)""")
    parser.add_argument("interproAnnotTsv",
                        help="""Interpro annotations TSV from interproToTab (input)""")
    parser.add_argument("annot2GenomePsl",
                        help="""Interpro annotations mapped to genome from interproAnnotsMap (input). For cross-species mapping, this will
                        be the target species genome.""")
    parser.add_argument("annot2GenomeRefTsv",
                        help="""association of annotations to mapped transcripts (input)""")
    parser.add_argument("annotDecoratorBed",
                        help="""annotation decorator BED file (output)""")
    opts, args = parser.parse_opts_args()
    pipettor.setDefaultLogger(logging.getLogger())
    return opts, args

def includeAnnot(annot):
    "filter for desired annotations"
    return annot.status

def getAnnotCatFields(annot):
    "fields based on if type of annotation"
    if annot.interpro_accession:
        return (annot.interpro_accession,
                annot.interpro_description,
                AnnotCategory.InterPro,
                INTERPRO_COLOR)
    else:
        return (annot.signature_accession,
                annot.signature_description,
                AnnotCategory.other,
                OTHER_COLOR)

def makeDecorator(annot, annot2GenomePsl, annot2GenomeRef):
    accession, description, annotCategory, color = getAnnotCatFields(annot)
    bedBlocks = [BedBlock(pb.tStart, pb.tEnd) for pb in annot2GenomePsl.blocks]
    itemName, itemStart, itemEnd = xrefToItemArgs(annot2GenomeRef)

    return InterproDecoration(annot2GenomePsl.tName, bedBlocks, annot.annotId, annot2GenomePsl.qStrand, color,
                              itemName, itemStart, itemEnd, None, None,
                              proteinAcc=annot.protein_accession,
                              analysis=annot.analysis,
                              accession=accession,
                              description=description,
                              annotCategory=annotCategory,
                              interproAcc=annot.interpro_accession,
                              interproDesc=annot.interpro_description,
                              signatureAcc=annot.signature_accession,
                              signatureDesc=annot.signature_description)

class AnnotationProcessor:
    """Class used to generate decorators."""

    # FIXME: just pass annotMapping
    def _buildAnnotation(self, annot2GenomePsl, annot, annot2GenomeRef):
        return makeDecorator(annot, annot2GenomePsl, annot2GenomeRef)

    def _createAnnot(self, annotMapping):
        if annotMapping.annotPsl is None:
            raise OutOfSyncError(f"annotation {annotMapping.annotRef.annotId} does not have a corresponding alignment")
        if includeAnnot(annotMapping.annot):
            return [self._buildAnnotation(annotMapping.annotPsl, annotMapping.annot, annotMapping.annotRef)]
        else:
            return None

    def create(self, transAnnotMappings):
        beds = []
        for annotMapping in transAnnotMappings.annotMappings:
            bed = self._createAnnot(annotMapping)
            if bed is not None:
                beds.extend(bed)
        return beds

def writeFeatTypes(featTypes, featTypesTsv):
    with fileOps.opengz(featTypesTsv, 'w') as fh:
        fileOps.prRowv(fh, "analysis", "accession", "description", "annotCategory")
        for ft in sorted(featTypes):
            fileOps.prRowv(fh, *ft)

def getFeatType(decoBed):
    """use to return tuple for collecting feature types that used when defining filters"""
    return (decoBed.analysis, decoBed.accession, decoBed.description, decoBed.annotCategory)

def interproAnnotsToDecorators(opts, interproAnnotTsv, annot2GenomePslFile, annot2GenomeRefTsv,
                               annotDecoratorBedFile):
    interproAnnotTbl = interproAnnotsLoad(interproAnnotTsv)

    transAnnotMappingReaderFunc = (
        transAnnotMappingReader(annot2GenomePslFile, annot2GenomeRefTsv,
                                lambda annotId: interproAnnotTbl.getByAnnotId(annotId))
    )

    featTypes = buildDecorators(AnnotationProcessor, transAnnotMappingReaderFunc,
                                getFeatType, annotDecoratorBedFile, opts.nprocs)
    if opts.featTypesTsv is not None:
        writeFeatTypes(featTypes, opts.featTypesTsv)

def main():
    opts, args = parseArgs()
    interproAnnotsToDecorators(opts, args.interproAnnotTsv, args.annot2GenomePsl, args.annot2GenomeRefTsv,
                               args.annotDecoratorBed)

if __name__ == '__main__':
    mp.set_start_method("forkserver", force=True)
    main()
