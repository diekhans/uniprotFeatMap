#!/usr/bin/env python3

import sys
import os.path as osp
import argparse
import pipettor
from pycbio.sys import fileOps
from pycbio.hgdata.psl import Psl, PslBlock, PslReader

sys.path.insert(0, osp.normpath(osp.join(osp.dirname(__file__), "../lib")))
from uniprotmap import dropVersion, TmpOrSaveFile, cleanTmpFiles
from uniprotmap.clisupport import cliAddGeneSetParameters
from uniprotmap.mapping import pslMapMkCmd
from uniprotmap.geneset import geneSetFactory
from uniprotmap.uniprot import UniProtMetaTbl

# Terminology
#    xxxId is id with version
#    xxxAcc is id without version
#
# Algorithm:
#   - Start with alignments of UniProt proteins that match the UniProt canonical
#     coding transcripts.  These are already filtered and paired.  Convert these
#     to CDS coordinates (3 * AA).
#   - Project the canonical transcript alignments to non-canonical transcript isoforms.
#     Using the genome This doesn't consider gene, which allows project to read-through transcripts.
#     Only CDS on other isoforms will have proteins mapped to it by masking the
#     UTR unaligned to the genome.
#   - Combine canonical and non-canonical mappings

def parseArgs():
    desc = """Filter protein to PSL transcript alignments to pair them based
    on being the listed transcript in UniProt.  Project the primary alignments
    to other transcript isoforms using the genomic coordinates. Output alignments
    in codon coordinates rather than AA (3x AA base position). """

    parser = argparse.ArgumentParser(description=desc)
    parser.add_argument("--interPrefix",
                        help="""save the intermediate files to names starting with ${iterPrefix}.${name}""")
    cliAddGeneSetParameters(parser, inclMetadata=True, inclTransGenomePsl=True, inclTransGenomeGp=True)
    parser.add_argument("uniprotMetaTsv",
                        help="""Uniprot metadata in TSV format (input)""")
    parser.add_argument("protCanonTransPsl",
                        help="protein to paired canonical transcript alignment PSL (input)")
    parser.add_argument("cdsTransPsl",
                        help="""filtered alignments, in codon coordinates (output)""")
    parser.add_argument("problemLogTsv",
                        help="""Log file of issues that happened (output)""")
    return parser.parse_args()

##
# data loading and filtering
##
def loadConvertCanonProtTransPsls(protCanonTransPslFile):
    """load aligned PSL, converting them to CDS->NA PSL."""
    with pipettor.Popen(["pslProtToRnaCoords", protCanonTransPslFile, "/dev/stdout"]) as fh:
        return [psl for psl in PslReader(fh)]

def writePsls(psls, pslFile):
    with fileOps.opengz(pslFile, 'w') as pslFh:
        for psl in sorted(psls, key=Psl.targetKey):
            psl.write(pslFh)

##
# build PSL with UTR unaligned
##
def _makeCdsPslBlock(gp, blk):
    tStart = max(gp.cdsStart, blk.tStart)
    size = min(gp.cdsEnd, blk.tEnd) - tStart
    if size <= 0:
        return None
    qStart = blk.qStart + (tStart - blk.tStart)
    return PslBlock(qStart, tStart, size)

def _addCdsPslBlocks(gp, psl, cdsPsl):
    for blk in psl.blocks:
        cdsBlk = _makeCdsPslBlock(gp, blk)
        if cdsBlk is not None:
            cdsPsl.addBlock(cdsBlk)

def buildCdsPsl(gp, psl):
    "modify a transcript PSL to make the UTR unaligned, returning a new PSL"
    cdsPsl = Psl.create(qName=psl.qName, qSize=psl.qSize,
                        tName=psl.tName, tSize=psl.tSize,
                        strand=psl.strand)
    _addCdsPslBlocks(gp, psl, cdsPsl)

    cdsPsl.updateBounds()
    cdsPsl.updateCounts()
    return cdsPsl

###
# Project alignments from UniProt canonical transcripts to transcripts isoforms
# that are non-canonical UniProt.
###
def writeCanonCdsToTransAligns(canonCdsToTransAligns, interPrefix):
    canonCdsToTransPslFile = TmpOrSaveFile(interPrefix, "canon-cds-trans.psl")
    writePsls(canonCdsToTransAligns, canonCdsToTransPslFile)
    return canonCdsToTransPslFile

def writeCanonTransToGenomeAligns(geneSet, uniprotMetaTbl, interPrefix):
    canonTransToGenomePslFile = TmpOrSaveFile(interPrefix, "canon-trans-genome.psl")
    with open(canonTransToGenomePslFile, 'w') as pslFh:
        for transId in sorted(geneSet.meta.transcriptIdIter()):
            if uniprotMetaTbl.isCanonProtTrans(transId):
                for entry in geneSet.data.getEntries(transId):
                    entry.psl.write(pslFh)
    return canonTransToGenomePslFile

def writeNoncanonTransToGenome(geneSet, uniprotMetaTbl, interPrefix):
    "this will make UTR portions unaligned"
    noncanonTransToGenomePslFile = TmpOrSaveFile(interPrefix, "noncanon-trans-genome.psl")
    with open(noncanonTransToGenomePslFile, 'w') as pslFh:
        for transcriptId in sorted(geneSet.meta.transcriptIdIter()):
            if not uniprotMetaTbl.isCanonProtTrans(transcriptId):
                for entry in geneSet.data.getEntries(transcriptId):
                    buildCdsPsl(entry.gp, entry.psl).write(pslFh)
    return noncanonTransToGenomePslFile

def saveBestAlign(alignsByProtTrans, psl):
    key = (psl.qName, psl.tName)
    curPsl = alignsByProtTrans.get(key)
    if (curPsl is None) or (psl.queryAligned() > curPsl.queryAligned()):
        alignsByProtTrans[key] = psl  # first of better

def readFilterMappedPsls(inFh):
    alignsByProtTrans = {}
    for psl in PslReader(inFh):
        saveBestAlign(alignsByProtTrans, psl)
    return list(alignsByProtTrans.values())

def mapCanonicalToNoncanon(canonCdsToTransPslFile, canonTransToGenomePslFile, noncanonTransToGenomePslFile, interPrefix):
    cmds = (pslMapMkCmd(canonCdsToTransPslFile, canonTransToGenomePslFile, "/dev/stdout",
                        interPrefix=interPrefix, interMid="canonToGenome") +
            pslMapMkCmd("/dev/stdin", noncanonTransToGenomePslFile, "/dev/stdout", swapMap=True,
                        interPrefix=interPrefix, interMid="canonToNoncanon"))

    # will get multiple alignments for multiple canon alignments, keep ones with best coverage
    with pipettor.Popen(cmds) as inFh:
        return readFilterMappedPsls(inFh)

def projectUniPortAlignments(geneSet, uniprotMetaTbl, canonCdsToTransAligns, interPrefix):
    # mapping pipeline is:
    #   portCds->canonTrans => canonTrans->genome => genome->isoTransCds => protCds->isoTrans
    # converted to CDS alignments to allow mapping to work.
    # isoFormGen

    canonCdsToTransPslFile = writeCanonCdsToTransAligns(canonCdsToTransAligns, interPrefix)
    canonTransToGenomePslFile = writeCanonTransToGenomeAligns(geneSet, uniprotMetaTbl, interPrefix)
    noncanonTransToGenomePslFile = writeNoncanonTransToGenome(geneSet, uniprotMetaTbl, interPrefix)
    noncanonCdsToTransAligns = mapCanonicalToNoncanon(canonCdsToTransPslFile, canonTransToGenomePslFile, noncanonTransToGenomePslFile, interPrefix)

    cleanTmpFiles(canonCdsToTransPslFile, canonTransToGenomePslFile, noncanonTransToGenomePslFile)
    return noncanonCdsToTransAligns

##
# output
##
def getQNameAccSet(aligns):
    return frozenset([dropVersion(psl.qName) for psl in aligns])

def getTNameAccSet(aligns):
    return frozenset([dropVersion(psl.tName) for psl in aligns])

def problemLog(logFh, reason, uniprotId=None, geneId=None, transcriptId=None, transcriptType=None):
    fileOps.prRowv(logFh, reason, uniprotId, geneId, transcriptId, transcriptType)

def reportMissingTrans(geneSet, uniprotMeta, logFh):
    "none of the transcripts are in the gene set"
    if len(uniprotMeta.ensemblGeneAccs & geneSet.meta.transcriptAccs) == 0:
        reason = "no_gene_transcript_in_geneset"
    else:
        reason = "no_transcript_in_geneset"
    problemLog(logFh, reason, uniprotId=uniprotMeta.acc,
               geneId=uniprotMeta.ensemblGene, transcriptId=uniprotMeta.ensemblTrans)

def reportUniproiNotAligned(geneSet, uniprotMeta, alignedUniprotIds, logFh):
    # find associated transcript info
    transRecs = [geneSet.meta.getTranscriptByAcc(transAcc)
                 for transAcc in uniprotMeta.ensemblTransAccs
                 if geneSet.meta.haveTranscriptAcc(transAcc)]
    if len(transRecs) == 0:
        problemLog(logFh, "uniprot_not_aligned", uniprotId=uniprotMeta.acc)
    else:
        for transRec in transRecs:
            problemLog(logFh, "uniprot_not_aligned", uniprotId=uniprotMeta.acc,
                       geneId=transRec.gene.geneId, transcriptId=transRec.transId, transcriptType=transRec.transType)


def reportUnalignedUniprot(geneSet, uniprotMeta, alignedUniprotIds, logFh):
    # explain why
    if len(uniprotMeta.ensemblTransIds) == 0:
        pass  # no transcripts, don't report
    elif len(uniprotMeta.ensemblTransAccs & geneSet.meta.transcriptAccs) == 0:
        # report because none of the transcripts in gene set (checked non-coding too)
        reportMissingTrans(geneSet, uniprotMeta, logFh)
    else:
        # have transcript, but not aligned, might be biotype change
        reportUniproiNotAligned(geneSet, uniprotMeta, alignedUniprotIds, logFh)

def reportUnalignedUniprots(geneSet, uniprotMetaTbl, canonCdsToTransAligns, logFh):
    alignedUniprotIds = getQNameAccSet(canonCdsToTransAligns)
    unalignedUniprotIds = frozenset(uniprotMetaTbl.byMainIsoAcc.keys()) - alignedUniprotIds
    for uniprotId in sorted(unalignedUniprotIds):
        reportUnalignedUniprot(geneSet, uniprotMetaTbl.getByMainIsoAcc(uniprotId), alignedUniprotIds, logFh)

def reportUnpairedNoncanonTrans(geneSet, uniprotMetaTbl, transAcc, logFh):
    # ones without uniprot are skipped
    transRec = geneSet.meta.getTranscriptByAcc(transAcc)
    for uniprotMeta in uniprotMetaTbl.getGeneAccMetas(transRec.gene.geneAcc):
        problemLog(logFh, "noncanon_trans_not_mapped", uniprotId=uniprotMeta.acc, geneId=transRec.gene.geneId,
                   transcriptId=transRec.transId, transcriptType=transRec.transType)

def reportUnpairedNoncanonTranses(geneSet, uniprotMetaTbl, noncanonCdsToTransAligns, logFh):
    noncanonTransAccs = geneSet.meta.transcriptAccs - uniprotMetaTbl.getCanonEnsemblAccSet()
    alignedTransAccs = getTNameAccSet(noncanonCdsToTransAligns)
    unmappedTransAccs = noncanonTransAccs - alignedTransAccs
    for transAcc in sorted(unmappedTransAccs):
        reportUnpairedNoncanonTrans(geneSet, uniprotMetaTbl, transAcc, logFh)

def report(geneSet, uniprotMetaTbl, canonCdsToTransAligns, noncanonCdsToTransAligns, problemLogTsv):
    with fileOps.opengz(problemLogTsv, 'w') as logFh:
        problemLog(logFh, "reason", "uniprotId", "geneId", "transcriptId", "transcriptType")
        reportUnalignedUniprots(geneSet, uniprotMetaTbl, canonCdsToTransAligns, logFh)
        reportUnpairedNoncanonTranses(geneSet, uniprotMetaTbl, noncanonCdsToTransAligns, logFh)

def proteinTranscriptAlign(geneSetName, geneSetMetadata, transGenomePsl, transGenomeGp,
                           uniprotMetaTsv, protCanonTransPslFile,
                           cdsTransPslFile, problemLogTsv, interPrefix):
    geneSet = geneSetFactory(geneSetName, geneSetMetadata=geneSetMetadata, transGenomePsl=transGenomePsl, transGenomeGp=transGenomeGp)
    uniprotMetaTbl = UniProtMetaTbl(uniprotMetaTsv)

    canonCdsToTransAligns = loadConvertCanonProtTransPsls(protCanonTransPslFile)
    noncanonCdsToTransAligns = projectUniPortAlignments(geneSet, uniprotMetaTbl,
                                                        canonCdsToTransAligns, interPrefix)

    report(geneSet, uniprotMetaTbl, canonCdsToTransAligns, noncanonCdsToTransAligns, problemLogTsv)

    writePsls(canonCdsToTransAligns + noncanonCdsToTransAligns, cdsTransPslFile)

def main(opts):
    proteinTranscriptAlign(opts.geneSetName, opts.geneSetMetadata, opts.transGenomePsl, opts.transGenomeGp,
                           opts.uniprotMetaTsv, opts.protCanonTransPsl,
                           opts.cdsTransPsl, opts.problemLogTsv,
                           opts.interPrefix)

main(parseArgs())
