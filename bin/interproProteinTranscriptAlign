#!/usr/bin/env python3

import sys
import os.path as osp
import argparse
import functools

sys.path.insert(0, osp.normpath(osp.join(osp.dirname(__file__), "../lib")))
from uniprotmap.geneset import GeneSetError, geneSetFactory
from uniprotmap.clisupport import cliAddGeneSetParameters
from uniprotmap.interproscan import InterproError
from uniprotmap.align import updateCompoundFastaHeader, proteinTranscriptAlign

def parseArgs():
    desc = """Align protein sequences annotated by InterProScan to
    RNAs with BLAT or BLAST.  Creates a protein to NA PSL alignments, with
    some basic filtering.  UTR is hard masked to prevent alignment outside of
    CDS without changing sequence size.

    Program can be rerun to finish up after manual parasol recovery. After a
    failure is connect and jobs finished, touch ${workdir}/aligns.done and
    rerun this program.
    """
    parser = argparse.ArgumentParser(description=desc)
    parser.add_argument("--algo", choices=("blast", "blat"), default="blat",
                        help="alignment algorithm")
    cliAddGeneSetParameters(parser, inclMetadata=True, inclTransFa=True)
    parser.add_argument("proteinFa",
                        help="""protein FASTA matching InterProScan results (input)""")
    parser.add_argument("protTransPsl",
                        help="""alignments of proteins to their transcripts, sorted by transcript (output)""")
    parser.add_argument("workDir",
                        help="temporary directory used by parasol run")
    return parser.parse_args()

def queryFaEditFilter(geneSet, faRec):
    updateCompoundFastaHeader(faRec)
    if faRec.id not in geneSet.meta.byProteinId:
        raise InterproError(f"protein id '{faRec}' not found in GENCODE metadata")
    return True

def alignFilter(geneSet, psl):
    try:
        trans = geneSet.meta.getTranscript(psl.tName)
    except GeneSetError as ex:
        raise InterproError(f"transcript id '{psl.tName}' not found in gene set metadata for protein/transcript alignment '{psl.qName}'/'{psl.tName}'") from ex
    return trans.proteinId == psl.qName

def interproProteinTranscriptAlign(geneSetName, geneSetMetadata, transFa, proteinFa, protTransPsl, algo, workDir):
    geneSet = geneSetFactory(geneSetName, geneSetMetadata=geneSetMetadata, transFa=transFa)
    proteinTranscriptAlign(proteinFa, geneSet.transFa, protTransPsl, algo, workDir,
                           queryFaEditFilterFunc=functools.partial(queryFaEditFilter, geneSet),
                           alignFilterFunc=functools.partial(alignFilter, geneSet))

def main(opts):
    interproProteinTranscriptAlign(opts.geneSetName, opts.geneSetMetadata, opts.transFa,
                                   opts.proteinFa, opts.protTransPsl, opts.algo, opts.workDir)

main(parseArgs())
