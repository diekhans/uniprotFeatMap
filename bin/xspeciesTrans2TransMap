#!/usr/bin/env python3

import os
import os.path as osp
import sys
import argparse
import pipettor
from pycbio.sys import fileOps

sys.path.insert(0, osp.normpath(osp.join(osp.dirname(__file__), "../lib")))
from uniprotmap.mapping import pslMapMkCmd

# Algorithm
#  - srcTransAln  -> srcTargetGenome -> srcTransTargetGenomeAln
#  - srcTransTargetGenomeAln -> targetMRnaGenomeAln -> srcTargetMRnaAln
#

def parseArgs():
    desc = """Create cross-species source mRNA to target mRNA alignments
    via transmap"""

    parser = argparse.ArgumentParser(description=desc)
    parser.add_argument("srcTrans2GenomePsl",
                        help="""source inferred mRNA alignments""")
    parser.add_argument("srcTransFa",
                        help="""source mRNA sequences""")
    parser.add_argument("src2TargetChains",
                        help="""alignment chains between species""")
    parser.add_argument("targetTrans2GenomePsl",
                        help="""target assembly inferred mRNA to genome alignments""")
    parser.add_argument("targetTransFa",
                        help="""target assembly mRNA sequences""")
    parser.add_argument("src2TargetTransPsl",
                        help="""alignments of source to target transcripts """)
    return parser.parse_args()


def transMapPipeline(srcTrans2GenomePsl, srcTransFa, src2TargetChains,
                     targetTrans2GenomePsl, targetMRnaTwoBit, src2TargetTransPsl):
    cmds = (pslMapMkCmd(srcTrans2GenomePsl, src2TargetChains, "/dev/stdout", chainMapFile=True) +
            pslMapMkCmd("/dev/stdin", targetTrans2GenomePsl, "/dev/stdout", swapMap=True) +
            [["pslMapPostChain", "/dev/stdin", "/dev/stdout"],
             ["pslRecalcMatch", "/dev/stdin", targetMRnaTwoBit, srcTransFa, "/dev/stdout"],
             ["sort", "-k10,10", "-k12,12n"]])
    pipettor.run(cmds, stdout=src2TargetTransPsl)

def xspeciesTrans2TransMap(srcTrans2GenomePsl, srcTransFa, src2TargetChains,
                           targetTrans2GenomePsl, targetTransFa, src2TargetTransPsl):
    tmpTargetMRnaTwoBit = fileOps.tmpFileGet("rnatwobit")
    try:
        pipettor.run(["faToTwoBit", "-long", targetTransFa, tmpTargetMRnaTwoBit])
        transMapPipeline(srcTrans2GenomePsl, srcTransFa, src2TargetChains,
                         targetTrans2GenomePsl, tmpTargetMRnaTwoBit, src2TargetTransPsl)
    finally:
        os.unlink(tmpTargetMRnaTwoBit)

def main(opts):
    xspeciesTrans2TransMap(opts.srcTrans2GenomePsl, opts.srcTransFa, opts.src2TargetChains,
                           opts.targetTrans2GenomePsl, opts.targetTransFa, opts.src2TargetTransPsl)


main(parseArgs())
