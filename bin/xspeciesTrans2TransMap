#!/usr/bin/env python3

import os
import os.path as osp
import sys
import pipettor
from pycbio.sys import fileOps, cli

sys.path.insert(0, osp.normpath(osp.join(osp.dirname(__file__), "../lib")))
from uniprotmap.mapping import pslMapMkCmd

# Algorithm
#  - srcTransTargetGenomeAln -> targetMRnaGenomeAln -> srcTargetMRnaAln
#

def parseArgs():
    desc = """Create cross-species source mRNA to target mRNA alignments
    via transmap"""

    parser = cli.ArgumentParserExtras(description=desc)
    parser.add_argument("srcTrans2TargetGenomePsl",
                        help="""source mRNA alignments""")
    parser.add_argument("srcTransFa",
                        help="""source mRNA sequences""")
    parser.add_argument("targetTrans2GenomePsl",
                        help="""target assemble inferred mRNA to genome alignments""")
    parser.add_argument("targetTransFa",
                        help="""target assembly mRNA sequences""")
    parser.add_argument("srcTrans2TargetTransPsl",
                        help="""alignments of source to target transcripts """)
    return parser.parse_opts_args()


def transMapPipeline(srcTrans2TargetGenomePslFile, srcTransFa, targetTrans2GenomePslFile,
                     targetMRnaTwoBit, srcTrans2TargetTransPslFile):
    cmds = (pslMapMkCmd(srcTrans2TargetGenomePslFile, targetTrans2GenomePslFile,
                        "/dev/stdout", swapMap=True, interPrefix="output/damn.", interMid="it") +
            [["pslMapPostChain", "/dev/stdin", "/dev/stdout"],
             ["pslRecalcMatch", "/dev/stdin", targetMRnaTwoBit, srcTransFa, "/dev/stdout"],
             ["sort", "-k10,10", "-k12,12n"]])
    pipettor.run(cmds, stdout=srcTrans2TargetTransPslFile)

def xspeciesTrans2TransMap(opts, srcTrans2TargetGenomePslFile, srcTransFa, targetTrans2GenomePslFile,
                           targetTransFa, srcTrans2TargetTransPslFile):
    tmpTargetMRnaTwoBit = fileOps.tmpFileGet("rnatwobit")
    try:
        pipettor.run(["faToTwoBit", "-long", targetTransFa, tmpTargetMRnaTwoBit])
        transMapPipeline(srcTrans2TargetGenomePslFile, srcTransFa, targetTrans2GenomePslFile,
                         tmpTargetMRnaTwoBit, srcTrans2TargetTransPslFile)
    finally:
        os.unlink(tmpTargetMRnaTwoBit)

def main():
    opts, args = parseArgs()
    with cli.ErrorHandler():
        xspeciesTrans2TransMap(opts, args.srcTrans2TargetGenomePsl, args.srcTransFa, args.targetTrans2GenomePsl,
                               args.targetTransFa, args.srcTrans2TargetTransPsl)


main()
