#!/usr/bin/env python3

import sys
import os
import os.path as osp
import argparse
import logging
import pipettor
from pycbio.sys import fileOps, loggingOps
from pycbio.tsv import TsvReader
from pycbio.hgdata.psl import Psl, PslBlock, PslReader

sys.path.insert(0, osp.normpath(osp.join(osp.dirname(__file__), "../lib")))
from protmap.uniprot import UniprotAnnotTbl, canonicalAnnotEncode

def parseArgs():
    desc = """
    Map Uniprot annotations to the genome via protein and transcript
    alignments.  The output will be a NA to NA PSL alignments of annotations
    of all annotation types that are mapped.  They can be filtered later when
    building decorators.

    Resulting PSLs will have query name of isoId#annotRowIndex
    """
    parser = argparse.ArgumentParser(description=desc)
    parser.add_argument("--interPrefix",
                        help="""save the intermediate files to names starting ${iterPrefix}.${name}.psl  ${iterPrefix}.name.type""")
    parser.add_argument("uniprotAnnotsTsv",
                        help="Uniprot annotations TSV from uniprotToTab")
    parser.add_argument("isoCanonPsl",
                        help="isoform to canonical paired alignments from uniprotIsoCanonicalSelect")
    parser.add_argument("protTransPairedPsl",
                        help="paired protein to transcript alignments from uniprotGencodeSelect")
    parser.add_argument("transGenomePsl",
                        help="transcript genome alignment; often from genePredToPsl")
    parser.add_argument("annotGenomePsl",
                        help="Uniprot annotations mapped to genome")
    parser.add_argument("annotTransRefTsv",
                        help="association of annotations to mapped transcripts")
    loggingOps.addCmdOptions(parser)
    opts = parser.parse_args()
    loggingOps.setupFromCmd(opts)
    pipettor.setDefaultLogger(logging.getLogger())
    return opts

def getCanonProtSizes(isoCanonPsl):
    # canonical is target
    canonProtSizes = {}
    for psl in PslReader(isoCanonPsl):
        canonProtSizes[psl.tName] = psl.tSize
    return canonProtSizes

def createAnnotPsl(annotIdx, annot, canonProtSizes):
    qName = canonicalAnnotEncode(annot.mainIsoAcc, annotIdx)
    # UniProt is 1-based, open-end
    tStart = annot.begin - 1
    tEnd = annot.end - 1
    tSize = canonProtSizes[annot.mainIsoAcc]

    # some annotations go past the end of the protein
    if tEnd > tSize:
        tEnd = tSize
    qSize = tEnd - tStart

    psl = Psl(qName=qName, qSize=qSize, qStart=0, qEnd=qSize,
              tName=annot.mainIsoAcc, tSize=tSize, tStart=tStart, tEnd=tEnd,
              strand='+')
    psl.addBlock(PslBlock(qStart=0, tStart=tStart, size=qSize))
    psl.computeCounts()
    return psl

def annotFilter(annot, canonProtSizes):
    canonSize = canonProtSizes.get(annot.mainIsoAcc, None)
    if canonSize is None:
        # no point if not in sizes, will not map
        return False
    elif annot.begin > canonSize:  # 1-based
        # some are completely off the end
        return False
    else:
        return True

def createAnnotPsls(uniprotAnnotTbl, canonProtSizes, annotCanonPslFh):
    for annotIdx in range(0, len(uniprotAnnotTbl.df)):
        annot = uniprotAnnotTbl.df.iloc[annotIdx]
        if annotFilter(annot, canonProtSizes):
            createAnnotPsl(annotIdx, annot, canonProtSizes).write(annotCanonPslFh)

def annotTransRefOpen(annotTransRefTsv):
    annotTransRefFh = fileOps.opengz(annotTransRefTsv, 'w')
    fileOps.prRowv(annotTransRefFh, "annotId", "transcriptPos", "transcriptId", "alignIdx")
    return annotTransRefFh

def annotTransRefWrite(annotTransRefFh, annotId, transcriptPos, transcriptId, alignIdx):
    fileOps.prRowv(annotTransRefFh, annotId, transcriptPos, transcriptId, alignIdx)

def writeRefs(mapInfoTmp, annotTransRefFh):
    for row in TsvReader(mapInfoTmp):
        if row.mappedPslLine != "":
            transcriptPos = f"{row.mappingTName}:{row.mappingTStart}-{row.mappingTEnd}"
            annotTransRefWrite(annotTransRefFh, row.srcQName, transcriptPos, row.srcTName, row.mappedPslLine)

def mkAnnotToIsoCmd(annotCanonPsl, isoCanonPsl, annotIsoPsl, interPrefix):
    """ create command to map annotations to protein isoform
        prot/prot -> prot/prot -> prot/prot
    """
    cmd1 = ["pslMap", "-swapMap", "-inType=prot_prot", "-mapType=prot_prot", "-check",
            annotCanonPsl, isoCanonPsl, annotIsoPsl]
    cmd = [cmd1]
    if interPrefix is not None:
        cmd1.append(f"-mapInfo={interPrefix}annotIso.mapinfo.tsv")
        cmd.append(["tee", f"{interPrefix}annotIso.psl"])
    return cmd

def mkAnnotToTransCmd(annotIsoPsl, protTransPairedPsl, annotTransPsl, interPrefix):
    """create command to map annotations to transcripts
        prot/prot -> prot/NA -> NA/NA
    """
    cmd1 = ["pslMap", "-inType=prot_prot", "-mapType=prot_na", "-check",
            annotIsoPsl, protTransPairedPsl, annotTransPsl]
    cmd = [cmd1]
    if interPrefix is not None:
        cmd1.append(f"-mapInfo={interPrefix}annotTrans.mapinfo.tsv")
        cmd.append(["tee", f"{interPrefix}annotTrans.psl"])
    return cmd

def mkAnnotToGenomeCmd(annotTransPsl, transGenomePsl, annotGenomePsl, annotGenomeMapInfo):
    """create command to map annotations to genomes
       NA/NA -> NA/NA -> NA/NA
    """
    cmd = ["pslMap", "-inType=na_na", "-mapType=na_na", "-check",
           annotTransPsl, transGenomePsl, annotGenomePsl,
           f"-mapInfo={annotGenomeMapInfo}"]
    return [cmd]

def pslMapAnnots(annotCanonPsl, isoCanonPsl, protTransPairedPsl, transGenomePsl,
                 annotGenomePslFh, annotTransRefFh, interPrefix):
    if interPrefix is not None:
        annotGenomeMapInfo = f"{interPrefix}annotGenome.mapinfo.tsv"
    else:
        annotGenomeMapInfo = fileOps.tmpFileGet(prefix="annotGenome.", suffix=".mapinfo.tsv")

    cmd = []

    # prot/prot -> prot/prot -> prot/prot
    cmd += mkAnnotToIsoCmd(annotCanonPsl, isoCanonPsl, "/dev/stdout", interPrefix)

    # prot/prot -> prot/NA -> NA/NA
    cmd += mkAnnotToTransCmd("/dev/stdin", protTransPairedPsl, "/dev/stdout", interPrefix)

    # NA/NA -> NA/NA -> NA/NA
    cmd += mkAnnotToGenomeCmd("/dev/stdin", transGenomePsl, "/dev/stdout", annotGenomeMapInfo)

    pipettor.run(cmd, stdout=annotGenomePslFh)
    writeRefs(annotGenomeMapInfo, annotTransRefFh)

    if interPrefix is None:
        os.unlink(annotGenomeMapInfo)

def uniprotMapAnnots(uniprotAnnotsTsv, isoCanonPsl, protTransPairedPsl, transGenomePsl,
                     annotGenomePsl, annotTransRefTsv, interPrefix):
    uniprotAnnotTbl = UniprotAnnotTbl(uniprotAnnotsTsv)
    canonProtSizes = getCanonProtSizes(isoCanonPsl)

    if interPrefix is not None:
        annotCanonPsl = f"{interPrefix}annotCanon.psl"
    else:
        annotCanonPsl = fileOps.tmpFileGet("annotCanon.", ".psl")

    with fileOps.opengz(annotCanonPsl, 'w') as annotCanonPslFh:
        createAnnotPsls(uniprotAnnotTbl, canonProtSizes, annotCanonPslFh)

    with fileOps.AtomicFileCreate(annotGenomePsl) as annotGenomePslFh:
        with annotTransRefOpen(annotTransRefTsv) as annotTransRefFh:
            pslMapAnnots(annotCanonPsl, isoCanonPsl, protTransPairedPsl, transGenomePsl,
                         annotGenomePslFh, annotTransRefFh, interPrefix)

    if interPrefix is None:
        os.unlink(annotCanonPsl)

def main(opts):
    uniprotMapAnnots(opts.uniprotAnnotsTsv, opts.isoCanonPsl, opts.protTransPairedPsl, opts.transGenomePsl,
                     opts.annotGenomePsl, opts.annotTransRefTsv, opts.interPrefix)

main(parseArgs())
