#!/usr/bin/env python3

import sys
import os
import os.path as osp
import argparse
import pipettor
from pycbio.sys import fileOps
from pycbio.tsv import TsvReader
from pycbio.hgdata.psl import Psl, PslBlock, PslReader

sys.path.insert(0, osp.normpath(osp.join(osp.dirname(__file__), "../lib")))
from protmap.uniprot import UniprotAnnotTbl, canonicalAnnotEncode

def parseArgs():
    desc = """
    TransMap a subset of the Uniprot annotations to the genome
    via protein and transcript alignments.

    Resulting PSLs will have query name of isoId#annotRowIndex
    """
    parser = argparse.ArgumentParser(description=desc)
    parser.add_argument("--keep", action="store_true",
                        help="""keep intermediate files""")
    parser.add_argument("uniprotAnnotsTsv",
                        help="Uniprot annotations TSV from uniprotToTab")
    parser.add_argument("isoCanonicalPsl",
                        help="isoform to canonical paired alignments from uniprotIsoCanonicalSelect")
    parser.add_argument("protTransPairedPsl",
                        help="paired protein to transcript alignments from uniprotGencodeSelect")
    parser.add_argument("transGenomePsl",
                        help="transcript genome alignment; often from genePredToPsl")
    parser.add_argument("annotGenomePsl",
                        help="Uniprot annotations mapped to genome")
    parser.add_argument("annotTransRefTsv",
                        help="association of annotations to mapped transcripts")
    return parser.parse_args()

def getCanonProtSizes(isoCanonicalPsl):
    # canonical is target
    canonProtSizes = {}
    for psl in PslReader(isoCanonicalPsl):
        canonProtSizes[psl.tName] = psl.tSize
    return canonProtSizes

def createAnnotPsl(annotIdx, annot, canonProtSizes):
    qName = canonicalAnnotEncode(annot.mainIsoAcc, annotIdx)
    tStart = annot.begin - 1
    tEnd = annot.end
    tSize = canonProtSizes[annot.mainIsoAcc]

    # some annotations go past the end of the protein
    if tEnd > tSize:
        tEnd = tSize
    qSize = tEnd - tStart

    psl = Psl(qName=qName, qSize=qSize, qStart=0, qEnd=qSize,
              tName=annot.mainIsoAcc, tSize=tSize, tStart=tStart, tEnd=tEnd,
              strand='+')
    psl.addBlock(PslBlock(qStart=0, tStart=tStart, size=qSize))
    psl.computeCounts()
    return psl

# featType to use
_featTypeToMap = frozenset([
    "domain",
    "zinc finger region"
])

def annotFilter(annot, canonProtSizes):
    if annot.mainIsoAcc not in canonProtSizes:
        return False  # no point, will not map
    return annot.featType in _featTypeToMap

def createAnnotPsls(uniprotAnnotTbl, canonProtSizes, annotTmpPslFh):
    for annotIdx in range(0, len(uniprotAnnotTbl.df)):
        annot = uniprotAnnotTbl.df.iloc[annotIdx]
        if annotFilter(annot, canonProtSizes):
            createAnnotPsl(annotIdx, annot, canonProtSizes).write(annotTmpPslFh)

def annotTransRefOpen(annotTransRefTsv):
    annotTransRefFh = fileOps.opengz(annotTransRefTsv, 'w')
    fileOps.prRowv(annotTransRefFh, "annotId", "transcriptPos", "transcriptId", "alignIdx")
    return annotTransRefFh

def annotTransRefWrite(annotTransRefFh, annotId, transcriptPos, transcriptId, alignIdx):
    fileOps.prRowv(annotTransRefFh, annotId, transcriptPos, transcriptId, alignIdx)

def writeRefs(mapInfoTmp, annotTransRefFh):
    for row in TsvReader(mapInfoTmp):
        if row.mappedPslLine != "":
            transcriptPos = f"{row.mappingTName}:{row.mappingTStart}-{row.mappingTEnd}"
            annotTransRefWrite(annotTransRefFh, row.srcQName, transcriptPos, row.srcTName, row.mappedPslLine)

def pslMapAnnots(annotTmpPsl, isoCanonicalPsl, protTransPairedPsl, transGenomePsl,
                 annotGenomePslFh, annotTransRefFh):
    mapInfoTmp = fileOps.tmpFileGet(prefix="mapinfo.")

    pipettor.run([["pslMap", "-swapMap", annotTmpPsl, isoCanonicalPsl, "/dev/stdout"],
                  ["pslMap", "/dev/stdin", protTransPairedPsl, "/dev/stdout"],
                  ["pslMap", "/dev/stdin", f"-mapInfo={mapInfoTmp}", transGenomePsl, "/dev/stdout"]],
                 stdout=annotGenomePslFh)

    writeRefs(mapInfoTmp, annotTransRefFh)
    os.unlink(mapInfoTmp)

def uniprotMapAnnots(uniprotAnnotsTsv, isoCanonicalPsl, protTransPairedPsl,
                     transGenomePsl, annotGenomePsl, annotTransRefTsv,
                     keepTmp):
    uniprotAnnotTbl = UniprotAnnotTbl(uniprotAnnotsTsv)
    canonProtSizes = getCanonProtSizes(isoCanonicalPsl)
    annotTmpPsl = fileOps.tmpFileGet("annots.", ".psl.tmp")
    annotTransRefFh = annotTransRefOpen(annotTransRefTsv)
    with fileOps.opengz(annotTmpPsl, 'w') as annotTmpPslFh:
        createAnnotPsls(uniprotAnnotTbl, canonProtSizes, annotTmpPslFh)

    with fileOps.AtomicFileCreate(annotGenomePsl) as annotGenomePslFh:
        pslMapAnnots(annotTmpPsl, isoCanonicalPsl, protTransPairedPsl, transGenomePsl,
                     annotGenomePslFh, annotTransRefFh)

    if keepTmp:
        print("Keeping annotTmpPsl:", annotTmpPsl, file=sys.stderr)
    else:
        os.unlink(annotTmpPsl)
    annotTransRefFh.close()

def main(opts):
    uniprotMapAnnots(opts.uniprotAnnotsTsv, opts.isoCanonicalPsl, opts.protTransPairedPsl, opts.transGenomePsl,
                     opts.annotGenomePsl, opts.annotTransRefTsv, opts.keep)

main(parseArgs())
