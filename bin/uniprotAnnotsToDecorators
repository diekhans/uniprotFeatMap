#!/usr/bin/env python3

import sys
import os.path as osp
import argparse
import multiprocessing as mp
from collections import namedtuple
from functools import partial
from pycbio.sys import fileOps
from pycbio.sys.profile import Profile
from pycbio.hgdata.decoration import BedBlock, Glyph

sys.path.insert(0, osp.normpath(osp.join(osp.dirname(__file__), "../lib")))
from uniprotmap.uniprot import UniProtMetaTbl, UniProtAnnotTbl, UniProtDataSet, TransCategory
from uniprotmap.uniprotDecorators import (getAnnotColor, getProblemColor, getAnnotDescriptiveName, getAnnotCategory, calcTransCategory,
                                          getColorUses, makeColorDesc,
                                          UNIPROT_CANON_ISO_OUTLINE_COLOR, UNIPROT_NONCANON_ISO_OUTLINE_COLOR,
                                          FEAT_INSERTION_COLOR, FEAT_DELETION_COLOR, AnnotType, FeatStatus,
                                          UniprotDecoration)
from uniprotmap.geneset import GeneSetData, geneSetLoadAnnotPsl
from uniprotmap.metadata import xrefToItemArgs
from uniprotmap.mappingAnalysis import analyzeFeatureMapping, FeatureIndelType, getFeatureIndelText
from uniprotmap.decoratorsBuilder import buildDecorators

class HelpColors(argparse.Action):
    "generate a help message on colors"
    def __call__(self, parser, namespace, values, option_string=None):
        descs = [makeColorDesc(UNIPROT_CANON_ISO_OUTLINE_COLOR,
                               "canonical transcript outline"),
                 makeColorDesc(UNIPROT_NONCANON_ISO_OUTLINE_COLOR,
                               "non-canonical isoform transcript outline"),
                 makeColorDesc(FEAT_INSERTION_COLOR,
                               "feature insertion"),
                 makeColorDesc(FEAT_DELETION_COLOR,
                               "feature deletion")]
        for (color, info) in getColorUses():
            descs.append(makeColorDesc(color, info))
        print("Color usage:")
        for desc in descs:
            print("   ", desc)
        parser.exit()


def parseArgs():
    desc = """
    Convert domain annotations alignments create by uniprotAnnotsMap
    to a decorator BED file in uniprotDecoration.as format.  Possibly filtering
    the results.
    """
    parser = argparse.ArgumentParser(description=desc)
    parser.add_argument("--help-colors", action=HelpColors, nargs=0,
                        help="""Show description of colors used, mostly for producing documentation""")
    parser.add_argument("--nprocs", type=int, default=1,
                        help="""number of processers to use""")
    parser.add_argument("--batchSize", type=int, default=1000,
                        help="""size of batch to sent to task""")
    parser.add_argument("--dataset", type=UniProtDataSet, choices=UniProtDataSet, default=UniProtDataSet.SwissProt,
                        help="""Is the UniProt dataset SwissProt or TrEMBL?""")
    parser.add_argument("--featTypesTsv",
                        help="""unique category and feature types for constructing track filters (output)""")
    parser.add_argument("trans2GenomePsl",
                        help="""Transcript genome alignment; often from genePredToPsl. For cross-species mapping, this should be the target species transcript alignments. (input)""")
    parser.add_argument("uniprotMetaTsv",
                        help="""Uniprot metadata in TSV format (input)""")
    parser.add_argument("uniprotAnnotsTsv",
                        help="""Uniprot annotations TSV from uniprotToTab (input)""")
    parser.add_argument("annot2GenomePsl",
                        help="""Uniprot annotations mapped to genome from uniprotAnnotsMap (input). For cross-species mapping, this will
                        be the target species genome.""")
    parser.add_argument("annot2TransRefTsv",
                        help="""association of annotations to mapped transcripts (input)""")
    parser.add_argument("annotDecoratorBed",
                        help="""annotation decorator BED file (output)""")
    profiler = Profile(parser)
    opts = parser.parse_args()
    profiler.setup(opts)
    return opts

class AnnotInfo(namedtuple("AnnotInfo",
                           ("transPsl", "annotPsl", "annot", "annotTransRef",
                            "transCategory", "dataSet"))):
    "common data passed through a lot of functions"
    pass

##
# shortFeatType to not include in track.
#
_shortFeatTypesToSkip = frozenset([
    'splicing',
])
def includeAnnot(annot):
    "filter for desired annotations"
    return annot.shortFeatType not in _shortFeatTypesToSkip

def makeDecorator(ainfo, featStatus, bedBlocks, name, color, fillColor, description, *, glyph=None):
    annot = ainfo.annot
    annotType = AnnotType.feature if glyph is None else AnnotType.disruption
    itemName, itemStart, itemEnd = xrefToItemArgs(ainfo.annotTransRef)
    category, categoryName = getAnnotCategory(annot)

    return UniprotDecoration(ainfo.annotPsl.tName, bedBlocks, name, ainfo.annotPsl.qStrand, color,
                             itemName, itemStart, itemEnd, glyph, fillColor,
                             annotType=annotType, dataSet=ainfo.dataSet,
                             uniprotAcc=ainfo.annot.acc, transCategory=ainfo.transCategory,
                             canonTransId="", featStatus=featStatus,
                             category=category, categoryName=categoryName, description=description,
                             shortFeatType=annot.shortFeatType, featType=annot.featType,
                             shortName=annot.shortName, longName=annot.longName,
                             comment=annot.comment, disease=annot.disease)

def makeBlockDeco(ainfo, featStatus, bedBlocks, name, color, fillColor,
                  description):
    return makeDecorator(ainfo, featStatus, bedBlocks, name, color, fillColor, description)

def makeGlyphDeco(ainfo, featStatus, pos, name, color, description):
    bedBlocks = [BedBlock(pos, pos)]
    return makeDecorator(ainfo, featStatus, bedBlocks, name, color, color, description,
                         glyph=Glyph.Triangle)

def getDescription(annot):
    "change this function to get a different description"
    return getAnnotDescriptiveName(annot)

def mkMainAnnotDecorator(ainfo, featIndels):
    description = getDescription(ainfo.annot)
    annotColor = getAnnotColor(ainfo.annot, ainfo.dataSet)
    fillColor = annotColor.setAlpha(0.5)
    featStatus = FeatStatus.complete if len(featIndels) == 0 else FeatStatus.disrupted
    if len(featIndels) > 0:
        color = getProblemColor(ainfo.annot, ainfo.dataSet)
    elif ainfo.transCategory == TransCategory.noncanonical:
        color = UNIPROT_NONCANON_ISO_OUTLINE_COLOR
    else:
        color = UNIPROT_CANON_ISO_OUTLINE_COLOR
    bedBlocks = [BedBlock(pb.tStart, pb.tEnd) for pb in ainfo.annotPsl.blocks]
    return makeBlockDeco(ainfo, featStatus, bedBlocks, ainfo.annotTransRef.annotMapId, color, fillColor, description)

def getDistruptId(annotTransRef, disruptIdx):
    return f"{annotTransRef.annotMapId}|{disruptIdx}"

def getIndelDesc(featIndel, annot):
    indelText = getFeatureIndelText(featIndel.indelType)
    return f"{indelText} of {featIndel.length} bases in " + getDescription(annot)

def makeFeatDelAnnot(ainfo, featIndel, disruptIdx):
    pos = (featIndel.tStart + featIndel.tEnd) // 2
    yield makeGlyphDeco(ainfo, featIndel.indelType, pos,
                        getDistruptId(ainfo.annotTransRef, disruptIdx), FEAT_DELETION_COLOR,
                        getIndelDesc(featIndel, ainfo.annot))

def makeFeatInsAnnot(ainfo, featIndel, disruptIdx):
    color = FEAT_INSERTION_COLOR
    bedBlocks = [BedBlock(featIndel.tStart, featIndel.tEnd)]
    yield makeBlockDeco(ainfo, featIndel.indelType, bedBlocks,
                        getDistruptId(ainfo.annotTransRef, disruptIdx), color, color,
                        getIndelDesc(featIndel, ainfo.annot))

def makeFeatIndelAnnot(ainfo, featIndel, disruptIdx):
    """Make glyphs or block for a particular INDEL in the annotation. A generator
    so more than one can be returned"""
    if featIndel.indelType == FeatureIndelType.insert:
        yield from makeFeatInsAnnot(ainfo, featIndel, disruptIdx)
    else:
        yield from makeFeatDelAnnot(ainfo, featIndel, disruptIdx)

def mkBrokenAnnotDecorators(ainfo, featIndels):
    "produces decorators to mark were annotations are broken in the mappings"
    decoratorBeds = []
    disruptIdx = 0
    for featIndel in featIndels:
        decoratorBeds.extend(makeFeatIndelAnnot(ainfo, featIndel, disruptIdx))
        disruptIdx += 1
    return decoratorBeds

def buildAnnotation(ainfo):
    "converts BEDs to strings so this work is distributed"
    decoBeds = []
    featIndels = analyzeFeatureMapping(ainfo.transPsl, ainfo.annotPsl)
    decoBeds.append(mkMainAnnotDecorator(ainfo, featIndels))
    if len(featIndels) > 0:
        decoBeds.extend(mkBrokenAnnotDecorators(ainfo, featIndels))
    return decoBeds

class AnnotationProcessor:
    """Class used to generate annotations.  This is used to move most of the
    processing to the pool sub-process"""

    def __init__(self, trans2GenomePsl, uniprotMetaTsv, uniprotAnnotsTsv, dataSet):
        self.dataSet = dataSet
        self.geneSetData = GeneSetData()
        geneSetLoadAnnotPsl(self.geneSetData, trans2GenomePsl)
        self.uniprotMetaTbl = UniProtMetaTbl(uniprotMetaTsv)
        self.uniprotAnnotTbl = UniProtAnnotTbl(uniprotAnnotsTsv)

    def _buildAnnotation(self, annotPsl, annot, annotTransRef):
        uniprotMeta = self.uniprotMetaTbl.getByAcc(annot.acc)
        transPsl = self.geneSetData.getAlign(annotTransRef.transcriptId, annotPsl.tName)
        transCategory = calcTransCategory(uniprotMeta, annotTransRef.transcriptId)
        # package up since so many parameters
        ainfo = AnnotInfo(transPsl=transPsl, annotPsl=annotPsl, annot=annot, annotTransRef=annotTransRef,
                          transCategory=transCategory, dataSet=self.dataSet)
        return buildAnnotation(ainfo)

    def create(self, annotMapping):
        annot = self.uniprotAnnotTbl.getByAnnotId(annotMapping.annotTransRef.annotId)
        if (annotMapping.annotPsl is not None) and includeAnnot(annot):
            return self._buildAnnotation(annotMapping.annotPsl, annot, annotMapping.annotTransRef)
        else:
            return None

def getFeatType(decoBed):
    """use to return tuple for collecting feature types that used when defining filters"""
    return (decoBed.category, decoBed.categoryName, decoBed.featType, decoBed.shortFeatType)

def writeFeatTypes(featTypes, featTypesTsv):
    with fileOps.opengz(featTypesTsv, 'w') as fh:
        fileOps.prRowv(fh, "category", "categoryName", "featType", "shortFeatType")
        for ft in sorted(featTypes):
            fileOps.prRowv(fh, *ft)

def uniprotAnnotsToDecorators(trans2GenomePsl, uniprotMetaTsv, uniprotAnnotsTsv, annot2GenomePslFile, annot2TransRefTsv,
                              annotDecoratorBedFile, dataSet, nprocs, batchSize, featTypesTsv):
    annotProcFunc = partial(AnnotationProcessor, trans2GenomePsl, uniprotMetaTsv, uniprotAnnotsTsv, dataSet)

    featTypes = buildDecorators(annotProcFunc, getFeatType, annot2GenomePslFile, annot2TransRefTsv,
                                annotDecoratorBedFile, nprocs, batchSize)
    if featTypesTsv is not None:
        writeFeatTypes(featTypes, featTypesTsv)

def main(opts):
    uniprotAnnotsToDecorators(opts.trans2GenomePsl, opts.uniprotMetaTsv, opts.uniprotAnnotsTsv,
                              opts.annot2GenomePsl, opts.annot2TransRefTsv,
                              opts.annotDecoratorBed, opts.dataset, opts.nprocs, opts.batchSize,
                              opts.featTypesTsv)

if __name__ == '__main__':
    mp.set_start_method("fork")
    main(parseArgs())
