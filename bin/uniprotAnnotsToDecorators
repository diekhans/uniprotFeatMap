#!/usr/bin/env python3

import sys
import os.path as osp
import argparse
import multiprocessing as mp
from collections import namedtuple
import pipettor
from pycbio.sys import fileOps
from pycbio.sys.profile import Profile
from pycbio.sys.svgcolors import SvgColors
from pycbio.hgdata.psl import PslReader
from pycbio.hgdata.bed import Bed, BedBlock

sys.path.insert(0, osp.normpath(osp.join(osp.dirname(__file__), "../lib")))
from protmap.uniprot import UniprotAnnotTbl, getAnnotColor, getProblemColor, getAnnotBedName
from protmap.gencode import GencodeData
from protmap.annotTransRef import AnnotTransRefs
from protmap.mappingAnalysis import analyzeFeatureMapping

def parseArgs():
    desc = """
    Convert domain annotations alignments create by uniprotMapAnnots
    to a decorator BED file in uniprotDecoration.as format.  Possibly filtering
    the results.
    """
    parser = argparse.ArgumentParser(description=desc)
    parser.add_argument("--nprocs", type=int, default=1,
                        help="number of processes to use for tasks")
    parser.add_argument("--batchSize", type=int, default=1000,
                        help="size of batch to sent to task")
    parser.add_argument("--trembl", action='store_true',
                        help="is this trembl?")
    parser.add_argument("--featTypesTsv",
                        help="output unique short and full feature types for constructing track filters")
    parser.add_argument("transGenomePsl",
                        help="transcript genome alignment; often from genePredToPsl")
    parser.add_argument("uniprotAnnotsTsv",
                        help="Uniprot annotations TSV from uniprotToTab")
    parser.add_argument("annotGenomePsl",
                        help="Uniprot annotations mapped to genome from uniprotMapAnnots")
    parser.add_argument("annotTransRefTsv",
                        help="association of annotations to mapped transcripts")
    parser.add_argument("annotDecoratorBedFile",
                        help="annotation decorator BED file output")
    profiler = Profile(parser)
    opts = parser.parse_args()
    profiler.setup(opts)
    return opts

# threshold for generating one glyph rather than two for insertion
FEAT_SHORT_INS_THRESHOLD = 4

class BedPlusColumns(namedtuple("BedPlusColumns",
                                ("decoratedItem", "style", "fillColor",
                                 "glyph", "dataSet", "uniprotAcc",
                                 "shortFeatType", "featType", "shortName",
                                 "longName", "comment", "disease"))):
    "extra BED columns"
    __slots__ = ()

##
# Note: for now, greatly limit the features until we can
# determine how to better group them. There are 43 short
# feature types.
##
shortFeatTypeInclude = frozenset([
    "domain",
    "zinc finger",
    "enzyme act site",
])

def includeAnnot(annot):
    "filter for desired annotations"
    return annot.shortFeatType in shortFeatTypeInclude

def createDecoratorBed(chrom, strand, bedBlocks, annotTransRef, name, color, fillColor, style,
                       uniprotAcc, isTrembl, shortFeatType, featType, shortName, longName,
                       comment, disease, *, glyph=None, thickStart=None, thickEnd=None):
    "This creates a decorator BED, with annotation options are supplied."
    start, end = bedBlocks[0].start, bedBlocks[-1].end
    decoratedItem = annotTransRef.transcriptPos + ':' + annotTransRef.transcriptId
    dataSet = "TreMBL" if isTrembl else "SwissProt"
    if glyph is None:
        glyph = ""
    if fillColor is None:
        fillColor = color
    if thickStart is None:
        thickStart = start
    if thickEnd is None:
        thickEnd = end
    extraCols = BedPlusColumns(decoratedItem, style, fillColor.toRgba8Str(), glyph,
                               dataSet, uniprotAcc, shortFeatType, featType,
                               shortName, longName, comment, disease)
    return Bed(chrom, start, end, name,
               strand=strand, thickStart=thickStart, thickEnd=thickEnd,
               blocks=bedBlocks, numStdCols=12,
               itemRgb=color.toRgb8Str(),
               extraCols=extraCols)

def makeGlyph(tStart, tEnd, namePre, color, annotPsl, annot, annotTransRef, isTrembl):
    bedBlocks = [BedBlock(tStart, tEnd)]
    return createDecoratorBed(annotPsl.tName, annotPsl.qStrand, bedBlocks, annotTransRef,
                              namePre + getAnnotBedName(annot), color, color, "glyph",
                              annot.acc, isTrembl,
                              annot.shortFeatType, annot.featType,
                              namePre + annot.shortName, namePre + annot.longName,
                              annot.comment, annot.disease, glyph="triangle")


def mkMainAnnotDecorator(annotPsl, annot, annotTransRef, isTrembl, featIndels):
    annotColor = getAnnotColor(annot, isTrembl)
    fillColor = annotColor.setAlpha(0.5)
    color = annotColor if len(featIndels) == 0 else getProblemColor(annot, isTrembl)
    bedBlocks = [BedBlock(pb.tStart, pb.tEnd) for pb in annotPsl.blocks]
    return createDecoratorBed(annotPsl.tName, annotPsl.qStrand, bedBlocks, annotTransRef,
                              getAnnotBedName(annot), color, fillColor, "block",
                              annot.acc, isTrembl,
                              annot.shortFeatType, annot.featType,
                              annot.shortName, annot.longName,
                              annot.comment, annot.disease)

def makeFeatDelAnnot(featIndel, annotPsl, annot, annotTransRef, isTrembl):
    yield makeGlyph(featIndel.tStart, featIndel.tEnd,
                    f"del {featIndel.length}: ", SvgColors.red, annotPsl, annot, annotTransRef, isTrembl)

def makeFeatShortInsAnnot(featIndel, annotPsl, annot, annotTransRef, isTrembl):
    pos = featIndel.tStart + (featIndel.length // 2)
    yield makeGlyph(pos, pos + 1,
                    f"ins {featIndel.length}: ", SvgColors.red, annotPsl, annot, annotTransRef, isTrembl)

def makeFeatLongInsAnnot(featIndel, annotPsl, annot, annotTransRef, isTrembl):
    # make long bar
    namePre = f"ins {featIndel.length}: "
    color = SvgColors.red
    bedBlocks = [BedBlock(featIndel.tStart, featIndel.tEnd)]
    yield createDecoratorBed(annotPsl.tName, annotPsl.qStrand, bedBlocks, annotTransRef,
                             namePre + getAnnotBedName(annot), color, color, "block",
                             annot.acc, isTrembl,
                             namePre + annot.shortFeatType, annot.featType,
                             annot.shortName, annot.longName,
                             annot.comment, annot.disease)

def makeFeatInsAnnot(featIndel, annotPsl, annot, annotTransRef, isTrembl):
    if featIndel.length <= FEAT_SHORT_INS_THRESHOLD:
        yield from makeFeatShortInsAnnot(featIndel, annotPsl, annot, annotTransRef, isTrembl)
    else:
        yield from makeFeatLongInsAnnot(featIndel, annotPsl, annot, annotTransRef, isTrembl)

def makeFeatIndelAnnot(featIndel, annotPsl, annot, annotTransRef, isTrembl):
    """Make glyphs or block for a particular INDEL in the annotation. A generator
    so more than one can be returned"""
    if featIndel.isFeatDel:
        yield from makeFeatDelAnnot(featIndel, annotPsl, annot, annotTransRef, isTrembl)
    else:
        yield from makeFeatInsAnnot(featIndel, annotPsl, annot, annotTransRef, isTrembl)

def mkBrokenAnnotDecorators(transPsl, annotPsl, annot, annotTransRef, isTrembl, featIndels):
    "produces glyphs to mark were annotations are broken in the mappings"
    glyphBeds = []
    for featIndel in featIndels:
        glyphBeds.extend(makeFeatIndelAnnot(featIndel, annotPsl, annot, annotTransRef, isTrembl))
    return glyphBeds


def buildAnnotation(transPsl, annotPsl, annot, annotTransRef, isTrembl, decoratorBeds):
    "converts BEDs to strings so this work is distributed"
    featIndels = analyzeFeatureMapping(transPsl, annotPsl)
    bed = mkMainAnnotDecorator(annotPsl, annot, annotTransRef, isTrembl, featIndels)
    decoratorBeds.append(bed)
    if len(featIndels) > 0:
        glyphBeds = mkBrokenAnnotDecorators(transPsl, annotPsl, annot, annotTransRef, isTrembl, featIndels)
        decoratorBeds.extend(glyphBeds)

class AnnotationProcessor:
    """Class used to generate annotations.  This is used to move most of the
    processing to the pool sub-process"""

    def __init__(self, transGenomePsl, uniprotAnnotsTsv, annotTransRefTsv, isTrembl):
        self.isTrembl = isTrembl
        self.transGenomeAlns = GencodeData(transGenomePsl)
        self.uniprotAnnotTbl = UniprotAnnotTbl(uniprotAnnotsTsv)
        self.annotTransRefs = AnnotTransRefs(annotTransRefTsv)

    def processBatch(self, alignBatch):
        decoratorBeds = []
        for annotPsl, alignIdx in alignBatch:
            annot = self.uniprotAnnotTbl.getByAnnotId(annotPsl.qName)
            if includeAnnot(annot):
                annotTransRef = self.annotTransRefs.get(annotPsl.qName, alignIdx)
                transPsl = self.transGenomeAlns.get(annotTransRef.transcriptId, annotPsl.tName)
                buildAnnotation(transPsl, annotPsl, annot, annotTransRef, self.isTrembl, decoratorBeds)
        return decoratorBeds

def workerInit(transGenomePsl, uniprotAnnotsTsv, annotTransRefTsv, isTrembl):
    "sub-process setup"
    global gAnnotationProcessor
    gAnnotationProcessor = AnnotationProcessor(transGenomePsl, uniprotAnnotsTsv, annotTransRefTsv, isTrembl)

def worker(alignBatch):
    "sub-process worker"
    return gAnnotationProcessor.processBatch(alignBatch)

def annotGenomeBatchReader(annotGenomePslFile, batchSize):
    """return tuples of (annotPsl, alignIdx)"""
    alignIdx = 0
    alignBatch = []

    for annotPsl in PslReader(annotGenomePslFile):
        alignBatch.append((annotPsl, alignIdx))
        alignIdx += 1
        if len(alignBatch) >= batchSize:
            yield alignBatch
            alignBatch = []
    if len(alignBatch) > 0:
        yield alignBatch

def writeDecoratorBeds(batchBedsIter, annotDecoratorBedFile):
    "write results from multiprocessing task as they come back via an iter"
    featTypes = set()
    with fileOps.AtomicFileCreate(annotDecoratorBedFile) as tmpDecoBed:
        # also sort by target item and feature type for test reproducible
        with pipettor.Popen(["sort", "-k1,1", "-k2,2n", "-k3,3n", "-k13,13n", "-k4,4n"], 'w', stdout=tmpDecoBed) as decoBedFh:
            for batchBeds in batchBedsIter:
                for bed in batchBeds:
                    bed.write(decoBedFh)
                    featTypes.add((bed.extraCols.featType, bed.extraCols.shortFeatType))
    return featTypes


def processSingle(transGenomePsl, uniprotAnnotsTsv, annotGenomePslFile, annotTransRefTsv, annotDecoratorBedFile,
                  isTrembl, batchSize):
    workerInit(transGenomePsl, uniprotAnnotsTsv, annotTransRefTsv, isTrembl)
    batchBedsIters = []
    for alignBatch in annotGenomeBatchReader(annotGenomePslFile, batchSize):
        batchBedsIters.append(worker(alignBatch))

    featTypes = writeDecoratorBeds(batchBedsIters, annotDecoratorBedFile)
    return featTypes


def processMulti(transGenomePsl, uniprotAnnotsTsv, annotGenomePslFile, annotTransRefTsv, annotDecoratorBedFile,
                 isTrembl, nprocs, batchSize):
    with mp.Pool(processes=nprocs, initializer=workerInit,
                 initargs=(transGenomePsl, uniprotAnnotsTsv, annotTransRefTsv, isTrembl)) as pool:
        batchBedsIter = pool.imap_unordered(worker,
                                            annotGenomeBatchReader(annotGenomePslFile, batchSize))
        featTypes = writeDecoratorBeds(batchBedsIter, annotDecoratorBedFile)
    return featTypes

def writeFeatTypes(featTypes, featTypesTsv):
    with open(featTypesTsv, 'w') as fh:
        fileOps.prRowv(fh, "featType", "shortFeatType")
        for ft in sorted(featTypes):
            fileOps.prRowv(fh, ft.featType, ft.shortFeatType)

def uniprotAnnotsToDecorators(transGenomePsl, uniprotAnnotsTsv, annotGenomePslFile, annotTransRefTsv, annotDecoratorBedFile,
                              isTrembl, nprocs, batchSize, featTypesTsv):
    # special case one process makes profiling easier
    if nprocs == 1:
        featTypes = processSingle(transGenomePsl, uniprotAnnotsTsv, annotGenomePslFile, annotTransRefTsv, annotDecoratorBedFile,
                                  isTrembl, batchSize)
    else:
        featTypes = processMulti(transGenomePsl, uniprotAnnotsTsv, annotGenomePslFile, annotTransRefTsv, annotDecoratorBedFile,
                                 isTrembl, nprocs, batchSize)
    if featTypesTsv is not None:
        writeFeatTypes(featTypes, featTypesTsv)

def main(opts):
    uniprotAnnotsToDecorators(opts.transGenomePsl, opts.uniprotAnnotsTsv, opts.annotGenomePsl, opts.annotTransRefTsv,
                              opts.annotDecoratorBedFile, opts.trembl, opts.nprocs, opts.batchSize,
                              opts.featTypesTsv)

if __name__ == '__main__':
    mp.set_start_method("fork")
    main(parseArgs())
