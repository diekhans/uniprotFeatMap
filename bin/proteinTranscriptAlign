#!/usr/bin/env python3

import sys
from os import path as osp
import argparse
import pipettor
from pycbio.sys import fileOps

sys.path.insert(0, osp.normpath(osp.join(osp.dirname(__file__), "../lib")))
from protmap import conf, prMsg, runIfNotDone, runIfOutOfDate
from protmap.align import querySplit, runBatch

proteinTranscriptAlignJob = osp.join(osp.dirname(__file__), "proteinTranscriptAlignJob")

# Note:
#  - Don't filter for minimum alignment coverage to get alt isoforms, which
#    are often split
#  - percent-identity doesn't seem very sane from blastToPsl for protein to RNH

def parseArgs():
    desc = """Align uniprot to transcript with BLAST and convert to PSL.
    program can rerun to finish up after manual parasol recovery.
    """
    parser = argparse.ArgumentParser(description=desc)
    parser.add_argument("--algo", choices=("blast", "blat"), default="blast",
                        help="alignment algorithm")
    parser.add_argument("protFa",
                        help="protein FASTA")
    parser.add_argument("transFa",
                        help="transcript FASTA")
    parser.add_argument("protTransPsl",
                        help="alignments, sorted by transcript")
    parser.add_argument("workDir",
                        help="temporary directory used by parasol run")
    return parser.parse_args()

def editFasta(inFa, outFa):
    """
    decompress and split GENCODE FASTA headers like
    >ENST00000641515.2|ENSG00000186092.7|OTTHUMG00000001094.4|OTTHUMT00000003223.4|OR4F5-201|OR4F5|2618|UTR5:1-60|CDS:61-1041|UTR3:1042-2618|
    """
    with fileOps.opengz(inFa) as inFh:
        with open(outFa, 'w') as outFh:
            for line in inFh:
                print(line.replace('|', ' ').strip(), file=outFh)

def targetBuildDb(transFa, transDbFa, workDir):
    prMsg("building target transcript database")
    fileOps.ensureDir(workDir)
    fileOps.ensureFileDir(transDbFa)
    editFasta(transFa, transDbFa)

    logFile = osp.join(workDir, "formatdb.log")
    pipettor.run([osp.join(conf.blastDir, "formatdb"),
                  "-l", logFile, "-i", transDbFa, "-p", "F"])

def combineAligns(alignDir, protTransPsl):
    "concatenate and sort by tName (transcript))"
    prMsg("combining alignments")
    # discard not within the configure minimum identity and coverage.  Batch
    # program discards PSLs that are not ++ alignments
    pipettor.run([["find", alignDir, "-name", "*.psl", "-print0"],
                  ["sort", "-k14,14", "-k10,10", "--files0-from=-"],
                  ["pslCDnaFilter", "-verbose=0",
                   "-minCover=" + str(conf.protTransAlnMinCover),
                   "-minId=" + str(conf.protTransAlnMinId),
                   "/dev/stdin", "/dev/stdout"]], stdout=protTransPsl)

def proteinTranscriptAlign(protFa, transFa, protTransPsl, algo, workDir):
    transDbDir = osp.join(workDir, "transDb")
    transDbFa = osp.join(transDbDir, "transDb.fa")
    with runIfNotDone(transDbDir, depends=transFa) as do:
        if do:
            targetBuildDb(transFa, transDbFa, workDir)

    queriesDir = osp.join(workDir, "queriesDir")
    with runIfNotDone(queriesDir, depends=protFa) as do:
        if do:
            querySplit(protFa, queriesDir)

    alignDir = osp.join(workDir, "aligns")
    with runIfNotDone(alignDir, doneDepends=[transDbDir, queriesDir]) as do:
        if do:
            runBatch([proteinTranscriptAlignJob, algo], queriesDir, transDbFa, alignDir,
                     osp.join(workDir, "batch"))

    with runIfOutOfDate(protTransPsl, doneDepends=alignDir) as do:
        if do:
            with fileOps.AtomicFileCreate(protTransPsl) as tmpPsl:
                combineAligns(alignDir, tmpPsl)
    prMsg("finished")

def main(opts):
    proteinTranscriptAlign(opts.protFa, opts.transFa, opts.protTransPsl, opts.algo, opts.workDir)

main(parseArgs())
