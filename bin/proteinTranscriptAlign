#!/usr/bin/env python3

import sys
from os import path as osp
import glob
import argparse
import pipettor
from pycbio.sys import fileOps
from pycbio.distrib.parasol import Para

sys.path.insert(0, osp.normpath(osp.join(osp.dirname(__file__), "../lib")))

from protmap import getDoneFile, runIfNotDone, runIfOutOfDate
from protmap import conf

# Note:
#  - Don't filter for minimum alignment coverage to get alt isoforms, which
#    are often split
#  - percent-identity doesn't seem very sane from blastToPsl for protein to RNH

def parseArgs():
    desc = """Align uniprot to transcript with BLAST and convert to PSL.
    program can rerun to finish up after manual parasol recovery.
    """
    parser = argparse.ArgumentParser(description=desc)
    parser.add_argument("protFa",
                        help="protein FASTA")
    parser.add_argument("transFa",
                        help="transcript FASTA")
    parser.add_argument("protTransPsl",
                        help="alignments, sorted by transcript")
    parser.add_argument("workDir",
                        help="temporary directory used by parasol run")
    return parser.parse_args()

def prLog(msg):
    print(msg, file=sys.stderr, flush=True)

def editFasta(inFa, outFa):
    """
    decompress and split GENCODE FASTA headers like
    >ENST00000641515.2|ENSG00000186092.7|OTTHUMG00000001094.4|OTTHUMT00000003223.4|OR4F5-201|OR4F5|2618|UTR5:1-60|CDS:61-1041|UTR3:1042-2618|
    """
    with fileOps.opengz(inFa) as inFh:
        with open(outFa, 'w') as outFh:
            for line in inFh:
                print(line.replace('|', ' ').strip(), file=outFh)

def buildTargetTranscripts(transFa, transDbFa, workDir):
    prLog("building target transcript database")
    fileOps.ensureDir(workDir)
    fileOps.ensureFileDir(transDbFa)
    editFasta(transFa, transDbFa)

    logFile = osp.join(workDir, "formatdb.log")
    pipettor.run([osp.join(conf.blastDir, "formatdb"),
                  "-l", logFile, "-i", transDbFa, "-p", "F"])

def getProtSplitPrefix(protSplitDir):
    return osp.join(protSplitDir, "prot")

def listProtSplitFas(protSplitDir):
    return glob.glob(getProtSplitPrefix(protSplitDir) + "*")

def buildTargetQueryProts(protFa, protSplitDir):
    prLog("split query proteins")
    fileOps.ensureDir(protSplitDir)
    pipettor.run(["faSplit", "about", protFa, 2500, getProtSplitPrefix(protSplitDir)])

def makeJobFile(protSplitDir, transDbFa, alignDir, workDir):
    jobFile = osp.join(workDir, "jobs.para")
    runBlast = osp.join(osp.dirname(__file__), "runBlast")
    with open(jobFile, 'w') as fh:
        for protFa in listProtSplitFas(protSplitDir):
            outPsl = osp.join(alignDir, osp.basename(protFa) + ".psl")
            print(runBlast, transDbFa, protFa, f"{{check out exists {outPsl}}}", file=fh)
    if osp.getsize(jobFile) == 0:
        raise Exception(f"empty job file create: {jobFile}")
    return jobFile

def runBatch(protSplitDir, transDbFa, alignDir, workDir):
    prLog("running BLAST batch")
    jobFile = makeJobFile(protSplitDir, transDbFa, alignDir, workDir)
    paraDir = osp.abspath(osp.join(workDir, "batch"))
    para = Para(conf.paraHost, jobFile, paraDir=paraDir)
    para.free()
    try:
        para.make()
    except pipettor.exceptions.ProcessException as ex:
        raise Exception(f"batch failed, correct problem, re-run with -batch={paraDir}\n"
                        "then touch " + getDoneFile(alignDir)) from ex

def combineAligns(alignDir, protTransPsl):
    "concatenate and sort by tName (transcript))"
    prLog("combining alignments")
    # discard not within the configure minimum identity and coverage.  Batch
    # program discards PSLs that are not ++ alignments
    pipettor.run([["find", alignDir, "-name", "*.psl", "-print0"],
                  ["sort", "-k14,14", "-k10,10", "--files0-from=-"],
                  ["pslCDnaFilter", "-verbose=0",
                   "-minCover=" + str(conf.protAlnMinCover),
                   "-minId=" + str(conf.protAlnMinId),
                   "/dev/stdin", "/dev/stdout"]], stdout=protTransPsl)

def proteinTranscriptAlign(protFa, transFa, protTransPsl, workDir):
    transDbDir = osp.join(workDir, "transDb")
    transDbFa = osp.join(transDbDir, "transDb.fa")
    with runIfNotDone(transDbDir, depends=transFa) as do:
        if do:
            buildTargetTranscripts(transFa, transDbFa, workDir)

    protSplitDir = osp.join(workDir, "protSplit")
    with runIfNotDone(protSplitDir, depends=protFa) as do:
        if do:
            buildTargetQueryProts(protFa, protSplitDir)

    alignDir = osp.join(workDir, "aligns")
    with runIfNotDone(alignDir, doneDepends=[transDbDir, protSplitDir]) as do:
        if do:
            runBatch(protSplitDir, transDbFa, alignDir, workDir)

    with runIfOutOfDate(protTransPsl, doneDepends=alignDir) as do:
        if do:
            with fileOps.AtomicFileCreate(protTransPsl) as tmpPsl:
                combineAligns(alignDir, tmpPsl)
    prLog("finished")

def main(opts):
    proteinTranscriptAlign(opts.protFa, opts.transFa, opts.protTransPsl, opts.workDir)

main(parseArgs())
