#!/usr/bin/env python3

import sys
import os.path as osp
import argparse
import logging
from collections import defaultdict
import pipettor
from pycbio.sys import fileOps, cmdOps, loggingOps

sys.path.insert(0, osp.normpath(osp.join(osp.dirname(__file__), "../lib")))
from uniprotmap import TmpOrSaveFile, cleanTmpFiles, annotIdToProtAcc
from uniprotmap.mapping import PslMapInfoTbl, getQuerySizes, createAnnotToProteinCdsPsl, pslMapAnnots
from uniprotmap.uniprot import UniProtAnnotTbl
from uniprotmap.metadata import AnnotTransRefWriter

##
# Same-species mapping pipeline:
#     annot2protcds -> protcds2trans -> annot2trans
#     annot2trans -> trans2genome -> annot2genome
#
# Cross-species mapping pipeline:
#     annot2protcds -> protcds2trans -> annot2trans
#     annot2trans -> trans2xsptrans -> annot2xsptrans
#     annot2xsptrans -> trans2genome -> annot2genome
#  Requires an alignment of source transcripts to other species
#  transcripts filtered in some kind of smart way.
#
##
def parseArgs():
    desc = """
    Map Uniprot annotations to the genome via protein and transcript
    alignments.  The output will be a NA to NA PSL alignments of annotations
    of all annotation types that are mapped.  They can be filtered later when
    building decorators.

    Resulting PSLs will have query name of isoId#annotRowIndex

    This maybe also be used to project the mappings to another species by providing
    transcript to transcript alignments.
    """
    parser = argparse.ArgumentParser(description=desc)
    parser.add_argument("--xspeciesTransPsl",
                        help="""PSL alignments of transcripts in the source genome to transcripts in a target genome for cross-species mapping of UniProt features from xspeciesTrans2TransMap""")
    parser.add_argument("--annotTransPsl",
                        help="""PSL alignments of UniProt annotations to transcripts, with protein in codon coordinates.""")
    parser.add_argument("--interPrefix",
                        help="""Save the intermediate files to names starting with ${iterPrefix}.${name} (output)""")
    parser.add_argument("transGenomePsl",
                        help="""Transcript genome alignment; often from genePredToPsl. For cross-species mapping, this should be the target species transcript alignments. (input)""")
    parser.add_argument("uniprotAnnotsTsv",
                        help="""Uniprot annotations TSV from uniprotToTab (input)""")
    parser.add_argument("protTransPairedPsl",
                        help="""Paired protein to transcript CDS alignments from uniprotProteinTranscriptMap (input)""")
    parser.add_argument("annotGenomePsl",
                        help="""Uniprot annotations mapped to genome (output)""")
    parser.add_argument("annotTransRefTsv",
                        help="""Association of annotations to mapped transcripts (output)""")
    parser.add_argument("problemLogTsv",
                        help="""Log file of issues that happened (output)""")
    loggingOps.addCmdOptions(parser)
    opts, args = cmdOps.parse(parser)
    loggingOps.setupFromCmd(opts)
    pipettor.setDefaultLogger(logging.getLogger())
    return opts, args

class OutOfSyncError(Exception):
    "error when UniProt and mapped files are out-of-sycn "

def problemLogOpen(problemLogTsv):
    logFh = open(problemLogTsv, 'w')
    problemLog(logFh, "reason", "uniprotId", "featureType", "annotId", "begin", "end", "protSize")
    return logFh

def problemLog(logFh, reason, mainIsoAcc=None, featType=None, annotId=None, begin=None, end=None, protSize=None):
    fileOps.prRowv(logFh, reason, mainIsoAcc, featType, annotId, begin, end, protSize)

def problemLogAnnot(logFh, reason, annot, protSize=None):
    problemLog(logFh, reason, annot.mainIsoAcc, annot.featType, annot.annotId, annot.begin, annot.end, protSize)

def createAnnotPsl(annot, protCdsSizes):
    # qName will have the annotMapId in the form
    #  <uniprot_acc>|<feature_idx>|<annot_idx>
    # coordinates converted to CDS coordinates (3x)

    # UniProt is 1-based, open-ended
    annotStartOff = 3 * (annot.begin - 1)
    annotEndOff = 3 * (annot.end - 1)
    protCdsSize = protCdsSizes[annot.mainIsoAcc]

    # some features go past the end of the protein (already logged)
    if annotEndOff > protCdsSize:
        annotEndOff = protCdsSize

    return createAnnotToProteinCdsPsl(annot.annotId, annotStartOff, annotEndOff,
                                      annot.mainIsoAcc, protCdsSize)

def warnProtNotMapped(annot, warned, logFh):
    # no point if not in sizes, will not map
    key = ('uniport-protein-not-mapped', annot.mainIsoAcc)
    if key not in warned:
        problemLogAnnot(logFh, key[0], annot)
        warned.add(key)

def warnOffEnd(annot, protCdsSize, warned, logFh):
    # some are off the end; these are partially annotated
    key = ('uniprot-feature-off-end', annot.mainIsoAcc, annot.featType)
    if key not in warned:
        problemLogAnnot(logFh, key[0], annot, protCdsSize // 3)
        warned.add(key)

def annotFilter(annot, protCdsSizes, warned, logFh):
    protCdsSize = protCdsSizes.get(annot.mainIsoAcc, None)
    if protCdsSize is None:
        warnProtNotMapped(annot, warned, logFh)
        return False
    elif annot.begin > (protCdsSize // 3):  # 1-based
        warnOffEnd(annot, protCdsSize, warned, logFh)
        return False
    else:
        return True

def createAnnotPsls(uniprotAnnotTbl, protCdsSizes, annotProtPslFh, logFh):
    warned = set()
    for annot in uniprotAnnotTbl:
        if annotFilter(annot, protCdsSizes, warned, logFh):
            createAnnotPsl(annot, protCdsSizes).write(annotProtPslFh)

def buildAnnotCanonPsls(uniprotAnnotTbl, protCdsSizes, interPrefix, logFh):
    annotProtPsl = TmpOrSaveFile(interPrefix, "annotProt.psl")
    with fileOps.opengz(annotProtPsl, 'w') as annotProtPslFh:
        createAnnotPsls(uniprotAnnotTbl, protCdsSizes, annotProtPslFh, logFh)
    return annotProtPsl

def getXSpeciesSrcTrans(mappedTransId, xspeciesTransMapTbl):
    recs = xspeciesTransMapTbl.byMappedTName.get(mappedTransId)
    if recs is None:
        raise Exception(f"Could not find source transcript for cross-species mapped transcript '{mappedTransId}'")
    return recs[0].srcTName

def mkOutOfSyncAnnotExcept(canonAcc, allAnnots, transA2GMapInfos):
    transcriptId = transA2GMapInfos[0].mappingQName
    errMsg = ([f"UniProt features for {allAnnots[0].mainIsoAcc} out of sync with mapped annotations on {transcriptId}",
               f"number of features {len(allAnnots)}, number of mappings {len(transA2GMapInfos)}",
               "annotations:"] +
              [f"   [{i}] {allAnnots[i].annotId}" for i in range(len(allAnnots))] +
              ["mappings:"] +
              [f"   [{i}] {transA2GMapInfos[i].srcQName}" for i in range(len(transA2GMapInfos))])
    return OutOfSyncError('\n'.join(errMsg))

def splitByUniprotAcc(transA2GMapInfos):
    "some genes have multiple uniprot entries, split by acc"
    byUniprotAcc = defaultdict(list)
    for transA2GMapInfo in transA2GMapInfos:
        byUniprotAcc[annotIdToProtAcc(transA2GMapInfo.srcQName)].append(transA2GMapInfo)
    return byUniprotAcc

def writeMappedRef(transA2GMapInfo, transcriptId, transcriptPos, xspeciesSrcTransId, refWriter):
    refWriter.write(transA2GMapInfo.srcQName, transcriptId, transcriptPos,
                    transA2GMapInfo.mappedPslLine, xspeciesSrcTransId)

def writeUnmappedRef(annotId, transcriptId, transcriptPos, xspeciesSrcTransId, refWriter):
    refWriter.write(annotId, transcriptId, transcriptPos, None, xspeciesSrcTransId)

def writeUnmappedRange(allAnnots, iAll, mappedAnnotId, transcriptId, transcriptPos, xspeciesSrcTransId, refWriter):
    # advance all
    while (iAll < len(allAnnots)) and (allAnnots[iAll].annotId != mappedAnnotId):
        writeUnmappedRef(allAnnots[iAll].annotId, transcriptId, transcriptPos, xspeciesSrcTransId, refWriter)
        iAll += 1
        if iAll >= len(allAnnots):
            raise OutOfSyncError(f"mapped annotations our of order or out of sync with uniprot annotation file for '{transcriptId}' and '{mappedAnnotId}'")
    return iAll

def doWriteAllTransRefs(allAnnots, transcriptId, transA2GMapInfos, transcriptPos, xspeciesSrcTransId, refWriter):
    if len(transA2GMapInfos) > len(allAnnots):
        raise OutOfSyncError("more mapped annotations than actually annotations")
    iAll = 0

    for iMapped in range(len(transA2GMapInfos)):
        mappedAnnotId = transA2GMapInfos[iMapped].srcQName
        # unmapped before current
        iAll = writeUnmappedRange(allAnnots, iAll, mappedAnnotId, transcriptId, transcriptPos, xspeciesSrcTransId, refWriter)
        # current
        writeMappedRef(transA2GMapInfos[iMapped], transcriptId, transcriptPos, xspeciesSrcTransId, refWriter)
        iAll += 1
    # remaining unmapped
    for iAll in range(iAll, len(allAnnots)):
        writeUnmappedRef(allAnnots[iAll].annotId, transcriptId, transcriptPos, xspeciesSrcTransId, refWriter)

def writeAllTransRefs(canonAcc, allAnnots, transcriptId, transA2GMapInfos, transcriptPos, xspeciesSrcTransId, refWriter):
    try:
        doWriteAllTransRefs(allAnnots, transcriptId, transA2GMapInfos, transcriptPos, xspeciesSrcTransId, refWriter)
    except OutOfSyncError as ex:
        raise mkOutOfSyncAnnotExcept(canonAcc, allAnnots, transA2GMapInfos) from ex

def writeTransRefs(uniprotAnnotTbl, transcriptId, transA2GMapInfos, xspeciesTransMapTbl, refWriter):
    infos0 = transA2GMapInfos[0]
    transcriptPos = f"{infos0.mappingTName}:{infos0.mappingTStart}-{infos0.mappingTEnd}"
    xspeciesSrcTransId = (getXSpeciesSrcTrans(infos0.mappingQName, xspeciesTransMapTbl)
                          if xspeciesTransMapTbl is not None else None)
    canonAcc = annotIdToProtAcc(infos0.srcQName)
    allAnnots = uniprotAnnotTbl.byMainIsoAcc[canonAcc]
    writeAllTransRefs(canonAcc, allAnnots, transcriptId, transA2GMapInfos, transcriptPos, xspeciesSrcTransId, refWriter)

def writeRefs(uniprotAnnotTbl, annotGenomeMapTbl, xspeciesTransMapTbl, refWriter):
    # split by chrom, to handle PAR, and then by uniprot acc to handle multiple annotations
    for transIdChrom, transA2GMapInfos in sorted(annotGenomeMapTbl.byMappingQMappedTNames.items(), key=lambda v: v[0]):
        for uniprotAcc, uniprotA2GMapInfos in sorted(splitByUniprotAcc(transA2GMapInfos).items(), key=lambda v: v[0]):
            writeTransRefs(uniprotAnnotTbl, transIdChrom[0], uniprotA2GMapInfos, xspeciesTransMapTbl, refWriter)

def mapAnnots(opts, uniprotAnnotTbl, annotProtPsl, protTransPairedPsl, transGenomePsl,
              annotGenomePslFh, annotTransRefTsv, xspeciesTransPsl=None):
    annotGenomeMapInfoTsv = TmpOrSaveFile(opts.interPrefix, "annotGenome.mapinfo.tsv")

    xspeciesTransMapInfoTsv = None
    if xspeciesTransPsl is not None:
        xspeciesTransMapInfoTsv = TmpOrSaveFile(opts.interPrefix, "xspeciesTrans.mapinfo.tsv")

    pslMapAnnots(annotProtPsl, protTransPairedPsl, transGenomePsl, annotGenomeMapInfoTsv,
                 annotGenomePslFh, annotTransPsl=opts.annotTransPsl, interPrefix=opts.interPrefix,
                 xspeciesTransPsl=xspeciesTransPsl, xspeciesTransMapInfoTsv=xspeciesTransMapInfoTsv)

    annotGenomeMapTbl = PslMapInfoTbl(annotGenomeMapInfoTsv)
    xspeciesTransMapTbl = None
    if xspeciesTransMapInfoTsv is not None:
        xspeciesTransMapTbl = PslMapInfoTbl(xspeciesTransMapInfoTsv)

    with AnnotTransRefWriter(annotTransRefTsv) as refWriter:
        writeRefs(uniprotAnnotTbl, annotGenomeMapTbl, xspeciesTransMapTbl, refWriter)
    cleanTmpFiles(xspeciesTransMapInfoTsv, annotGenomeMapInfoTsv)

def uniprotAnnotsMap(opts, transGenomePsl, uniprotAnnotsTsv, protTransPairedPsl,
                     annotGenomePsl, annotTransRefTsv, problemLogTsv):
    uniprotAnnotTbl = UniProtAnnotTbl(uniprotAnnotsTsv)
    protCdsSizes = getQuerySizes(protTransPairedPsl)

    with problemLogOpen(problemLogTsv) as logFh:
        annotProtPsl = buildAnnotCanonPsls(uniprotAnnotTbl, protCdsSizes, opts.interPrefix, logFh)

    with fileOps.AtomicFileCreate(annotGenomePsl) as annotGenomePslFh:
        mapAnnots(opts, uniprotAnnotTbl, annotProtPsl, protTransPairedPsl, transGenomePsl,
                  annotGenomePslFh, annotTransRefTsv, opts.xspeciesTransPsl)

    cleanTmpFiles(annotProtPsl)

def main():
    opts, args = parseArgs()
    uniprotAnnotsMap(opts, args.transGenomePsl, args.uniprotAnnotsTsv, args.protTransPairedPsl,
                     args.annotGenomePsl, args.annotTransRefTsv, args.problemLogTsv)

main()
