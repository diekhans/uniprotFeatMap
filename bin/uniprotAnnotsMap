#!/usr/bin/env python3

import sys
import os.path as osp
from collections import defaultdict
import argparse
import logging
import pipettor
from pycbio.sys import fileOps, loggingOps
from pycbio.tsv import TsvReader
from pycbio.hgdata.psl import Psl, PslBlock, PslReader

sys.path.insert(0, osp.normpath(osp.join(osp.dirname(__file__), "../lib")))
from uniprotmap import TmpOrSaveFile, cleanTmpFiles
from uniprotmap.mapping import pslMapMkCmd, PslMapInfoTbl
from uniprotmap.uniprot import UniProtAnnotTbl
from uniprotmap.metadata import annotTransRefOpen, annotTransRefWrite

##
# Same-species mapping pipeline:
#     annot2protcds -> protcds2trans -> annot2trans
#     annot2trans -> trans2genome -> annot2genome
#
# Cross-species mapping pipeline:
#     annot2protcds -> protcds2trans -> annot2trans
#     annot2trans -> trans2xsptrans -> annot2xsptrans
#     annot2xsptrans -> trans2genome -> annot2genome
#  Requires an alignment of source transcripts to other species
#  transcripts filtered in some kind of smart way.
#
##
def parseArgs():
    desc = """
    Map Uniprot annotations to the genome via protein and transcript
    alignments.  The output will be a NA to NA PSL alignments of annotations
    of all annotation types that are mapped.  They can be filtered later when
    building decorators.

    Resulting PSLs will have query name of isoId#annotRowIndex

    This maybe also be used to project the mappings to another species by providing
    transcript to transcript alignments.
    """
    parser = argparse.ArgumentParser(description=desc)
    parser.add_argument("--xspeciesTransPsl",
                        help="""PSL alignments of transcripts in the source genome to transcripts in a target genome for cross-species mapping of UniProt features.""")
    parser.add_argument("--interPrefix",
                        help="""Save the intermediate files to names starting with ${iterPrefix}.${name} (output)""")
    parser.add_argument("uniprotAnnotsTsv",
                        help="""Uniprot annotations TSV from uniprotToTab (input)""")
    parser.add_argument("cdsTransPairedPsl",
                        help="""Paired protein to transcript CDS alignments from uniprotProteinTranscriptMap (input)""")
    parser.add_argument("transGenomePsl",
                        help="""Transcript genome alignment; often from genePredToPsl. For cross-species mapping, this should be the target species transcript alignments. (input)""")
    parser.add_argument("annotGenomePsl",
                        help="""Uniprot annotations mapped to genome (output)""")
    parser.add_argument("annotTransRefTsv",
                        help="""Association of annotations to mapped transcripts (output)""")
    parser.add_argument("problemLogTsv",
                        help="""Log file of issues that happened (output)""")
    loggingOps.addCmdOptions(parser)
    opts = parser.parse_args()
    loggingOps.setupFromCmd(opts)
    pipettor.setDefaultLogger(logging.getLogger())
    return opts

def problemLogOpen(problemLogTsv):
    logFh = open(problemLogTsv, 'w')
    problemLog(logFh, "reason", "uniprotId", "featureType", "annotId", "begin", "end", "protSize")
    return logFh

def problemLog(logFh, reason, mainIsoAcc=None, featType=None, annotId=None, begin=None, end=None, protSize=None):
    fileOps.prRowv(logFh, reason, mainIsoAcc, featType, annotId, begin, end, protSize)

def problemLogAnnot(logFh, reason, annot, protSize=None):
    problemLog(logFh, reason, annot.mainIsoAcc, annot.featType, annot.annotId, annot.begin, annot.end, protSize)

def getProtCdsSizes(cdsTransPairedPsl):
    # protein is query, but in CDS coordinates (3x)
    protCdsSizes = {}
    for psl in PslReader(cdsTransPairedPsl):
        protCdsSizes[psl.qName] = psl.qSize
    return protCdsSizes

def createAnnotPsl(annot, protCdsSizes):
    # qName will have the featAnnotId in the form
    #  <uniprot_acc>|<feature_idx>|<annot_idx>
    # coordinated converted to CDS coordinates (3x)

    # UniProt is 1-based, open-end
    tStart = 3 * (annot.begin - 1)
    tEnd = 3 * (annot.end - 1)
    tSize = protCdsSizes[annot.mainIsoAcc]

    # some features go past the end of the protein (already logged)
    if tEnd > tSize:
        tEnd = tSize
    qSize = tEnd - tStart

    psl = Psl(qName=annot.annotId, qSize=qSize, qStart=0, qEnd=qSize,
              tName=annot.mainIsoAcc, tSize=tSize, tStart=tStart, tEnd=tEnd,
              strand='+')
    psl.addBlock(PslBlock(qStart=0, tStart=tStart, size=qSize))
    psl.computeCounts()
    return psl

def warnProtNotMapped(annot, warned, logFh):
    # no point if not in sizes, will not map
    key = ('uniport-protein-not-mapped', annot.mainIsoAcc)
    if key not in warned:
        problemLogAnnot(logFh, key[0], annot)
        warned.add(key)

def warnOffEnd(annot, protCdsSize, warned, logFh):
    # some are off the end; these are partially annotated
    key = ('uniprot-feature-off-end', annot.mainIsoAcc, annot.featType)
    if key not in warned:
        problemLogAnnot(logFh, key[0], annot, protCdsSize // 3)
        warned.add(key)

def annotFilter(annot, protCdsSizes, warned, logFh):
    protCdsSize = protCdsSizes.get(annot.mainIsoAcc, None)
    if protCdsSize is None:
        warnProtNotMapped(annot, warned, logFh)
        return False
    elif annot.begin > (protCdsSize // 3):  # 1-based
        warnOffEnd(annot, protCdsSize, warned, logFh)
        return False
    else:
        return True

def createAnnotPsls(uniprotAnnotTbl, protCdsSizes, annotCanonPslFh, logFh):
    warned = set()
    for annot in uniprotAnnotTbl:
        if annotFilter(annot, protCdsSizes, warned, logFh):
            createAnnotPsl(annot, protCdsSizes).write(annotCanonPslFh)

def buildAnnotCanonPsls(uniprotAnnotTbl, protCdsSizes, interPrefix, logFh):
    annotCanonPsl = TmpOrSaveFile(interPrefix, "annotCanon.psl")
    with fileOps.opengz(annotCanonPsl, 'w') as annotCanonPslFh:
        createAnnotPsls(uniprotAnnotTbl, protCdsSizes, annotCanonPslFh, logFh)
    return annotCanonPsl

def pslMapAnnots(annotCanonPsl, cdsTransPairedPsl, transGenomePsl,
                 annotGenomeMapInfoTsv, xspeciesTransMapInfoTsv,
                 annotGenomePslFh, annotTransRefTsv, xspeciesTransPsl, interPrefix):
    # all of these pslMaps are NA/NA -> NA/NA -> NA/NA
    cmds = []

    # annotation on canonical transcripts to all transcripts alignment to canonical
    cmds += pslMapMkCmd(annotCanonPsl, cdsTransPairedPsl, "/dev/stdout",
                        interPrefix=interPrefix, interMid="annotTrans")
    if xspeciesTransPsl is not None:
        # transcript to other species transcript mapping
        cmds += pslMapMkCmd("/dev/stdin", xspeciesTransPsl, "/dev/stdout",
                            mapInfo=xspeciesTransMapInfoTsv,
                            interPrefix=interPrefix, interMid="xspeciesAnnotTrans")

    # per-transcript annotation to genome mapping
    cmds += pslMapMkCmd("/dev/stdin", transGenomePsl, "/dev/stdout", mapInfo=annotGenomeMapInfoTsv)

    pipettor.run(cmds, stdout=annotGenomePslFh)

def getXSpeciesSrcTrans(mappedTransId, xspeciesTransMapTbl):
    recs = xspeciesTransMapTbl.byMappedTName.get(mappedTransId)
    if recs is None:
        raise Exception(f"Could not find source transcript for cross-species mapped transcript '{mappedTransId}'")
    return recs[0].srcTName

def writeRef(annotGenomeMapInfo, annotIdMapIdxCounter, xspeciesTransMapTbl, annotTransRefFh):
    annotId = annotGenomeMapInfo.srcQName
    mapIdx = annotIdMapIdxCounter[annotId]
    annotIdMapIdxCounter[annotId] += 1
    transcriptPos = f"{annotGenomeMapInfo.mappingTName}:{annotGenomeMapInfo.mappingTStart}-{annotGenomeMapInfo.mappingTEnd}"
    if xspeciesTransMapTbl is not None:
        xspeciesSrcTransId = getXSpeciesSrcTrans(annotGenomeMapInfo.mappingQName, xspeciesTransMapTbl)
    else:
        xspeciesSrcTransId = None
    annotTransRefWrite(annotTransRefFh, annotId, mapIdx, transcriptPos,
                       annotGenomeMapInfo.srcTName, annotGenomeMapInfo.mappedPslLine, xspeciesSrcTransId)

def writeRefs(annotGenomeMapInfoTsv, xspeciesTransMapTbl, annotTransRefFh):
    annotIdMapIdxCounter = defaultdict(int)  # to get unique map index for diff transcripts
    for annotGenomeMapInfo in TsvReader(annotGenomeMapInfoTsv):
        writeRef(annotGenomeMapInfo, annotIdMapIdxCounter, xspeciesTransMapTbl, annotTransRefFh)

def writeRefsTsv(annotGenomeMapInfoTsv, xspeciesTransMapTbl, annotTransRefTsv):
    with annotTransRefOpen(annotTransRefTsv) as annotTransRefFh:
        writeRefs(annotGenomeMapInfoTsv, xspeciesTransMapTbl, annotTransRefFh)

def mapAnnots(annotCanonPsl, cdsTransPairedPsl, transGenomePsl,
              annotGenomePslFh, annotTransRefTsv, xspeciesTransPsl, interPrefix):
    annotGenomeMapInfoTsv = TmpOrSaveFile(interPrefix, "annotGenome.mapinfo.tsv")
    xspeciesTransMapInfoTsv = None if xspeciesTransPsl is None else TmpOrSaveFile(interPrefix, "xspeciesTrans.mapinfo.tsv")

    pslMapAnnots(annotCanonPsl, cdsTransPairedPsl, transGenomePsl,
                 annotGenomeMapInfoTsv, xspeciesTransMapInfoTsv,
                 annotGenomePslFh, annotTransRefTsv, xspeciesTransPsl, interPrefix)

    xspeciesTransMapTbl = PslMapInfoTbl(xspeciesTransMapInfoTsv) if xspeciesTransMapInfoTsv is not None else None
    writeRefsTsv(annotGenomeMapInfoTsv, xspeciesTransMapTbl, annotTransRefTsv)
    cleanTmpFiles(xspeciesTransMapInfoTsv, annotGenomeMapInfoTsv)

def uniprotAnnotsMap(uniprotAnnotsTsv, cdsTransPairedPsl, transGenomePsl,
                     annotGenomePsl, annotTransRefTsv, problemLogTsv,
                     xspeciesTransPsl, interPrefix):
    uniprotAnnotTbl = UniProtAnnotTbl(uniprotAnnotsTsv)
    protCdsSizes = getProtCdsSizes(cdsTransPairedPsl)

    with problemLogOpen(problemLogTsv) as logFh:
        annotCanonPsl = buildAnnotCanonPsls(uniprotAnnotTbl, protCdsSizes, interPrefix, logFh)

    with fileOps.AtomicFileCreate(annotGenomePsl) as annotGenomePslFh:
        mapAnnots(annotCanonPsl, cdsTransPairedPsl, transGenomePsl,
                  annotGenomePslFh, annotTransRefTsv, xspeciesTransPsl, interPrefix)

    cleanTmpFiles(annotCanonPsl)

def main(opts):
    uniprotAnnotsMap(opts.uniprotAnnotsTsv, opts.cdsTransPairedPsl, opts.transGenomePsl,
                     opts.annotGenomePsl, opts.annotTransRefTsv, opts.problemLogTsv,
                     opts.xspeciesTransPsl, opts.interPrefix)

main(parseArgs())
