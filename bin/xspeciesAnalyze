#!/usr/bin/env python3

# import os
import os.path as osp
import sys
from dataclasses import dataclass
from pycbio.sys import cli, fileOps
from pycbio.hgdata.coords import Coords

sys.path.insert(0, osp.normpath(osp.join(osp.dirname(__file__), "../lib")))
from uniprotmap import annotMapIdToAnnotId
from uniprotmap.clisupport import cliAddGeneSetParameters
from uniprotmap.geneset import GeneSet, geneSetFactory
from uniprotmap.xspeciesAnalysisData import (AnnotAssocs, annotAssocLoad,
                                             SrcAnnotSet, srcAnnotSetLoad,
                                             TargetAnnotSet, targetAnnotSetLoad)
from uniprotmap.xspeciesAnalysis import compareTransAnnotations, AnnotMethod, AnnotDiffCategory
from uniprotmap.mappingAnalysis import FeatureIndelType

def parseArgs():
    desc = """Compare Uniprot map annotations to IntrproScan generate annotations.
    """

    parser = cli.ArgumentParserExtras(description=desc)
    parser.add_argument("--major-disrupt-threshold", type=float, default=0.02,
                        help="""fraction of bases of an annotation insert of deleted "
                        "that is considered a major disruption""")
    parser.add_argument("--major-overlap-threshold", type=float, default=0.80,
                        help="""similar threshold  of for source and target overlap
                        being considered a major""")
    parser.add_argument("uniprotAnnotTsv",
                        help="""Uniprot annotations TSV from uniprotToTab (input)""")
    parser.add_argument("uniprotAnnot2GenomePsl",
                        help="""Uniprot annotations mapped to target (xspecies fucntionality) genome from uniprotAnnotsMap (input). """)
    parser.add_argument("uniprotAnnot2GenomeRefTsv",
                        help="""association of annotations to mapped transcripts (input)""")
    cliAddGeneSetParameters(parser, inclMetadata=True, inclTransGenomePsl=True)
    parser.add_argument("interproAnnotTsv",
                        help="""InterProScan TSV results (input)""")
    parser.add_argument("interproAnnot2GenomePsl",
                        help="""Interpro annotations mapped to genome from interproAnnotsMap (input). For cross-species mapping, this will
                        be the target species genome.""")
    parser.add_argument("interproAnnot2GenomeRefTsv",
                        help="""association of annotations to mapped transcripts (input)""")
    parser.add_argument("annotTypeAssocTsv",
                        help="""TSV with uniprotShortFeatType, interproAnalysis, "interproAcc (input)"""
                        """UniProt annotations maybe not be overlapping. Multiple interpro annotations """
                        """with the same accession from different analysis may overlap.""")
    parser.add_argument("analysisReportTsv",
                        help="""Analysis report (output)""")
    return parser.parse_opts_args()

###
# basic stuff
###
@dataclass
class DataBag:
    """Common data.  Maybe below could be methods on a class, but it
    started out a bunch of functions and it seems like a weird class."""

    opts: cli.ObjDict
    annotAssocs: AnnotAssocs
    targetGeneSet: GeneSet
    srcAnnotSet: SrcAnnotSet
    targetAnnotSet: TargetAnnotSet

    def getUniprotAnnot(self, annotMapId):
        return self.srcAnnotSet.uniprotAnnotTbl.getByAnnotId(annotMapIdToAnnotId(annotMapId))

    def getInterproAnnot(self, annotMapId):
        return self.targetAnnotSet.interproAnnotTbl.getByAnnotId(annotMapIdToAnnotId(annotMapId))

    def getAllTransIdChroms(self):
        return tuple(sorted(set(
            [(ann.transcriptId, ann.chrom) for ann in self.srcAnnotSet.annotMappingsTbl] +
            [(ann.transcriptId, ann.chrom) for ann in self.targetAnnotSet.annotMappingsTbl])))

def pslTCoords(psl):
    return Coords(psl.tName, psl.tStart, psl.tEnd)

def _countOverlap(psl1, psl2):
    overlapCnt = 0
    for blk1 in psl1.blocks:
        for blk2 in psl2.blocks:
            maxStart = max(blk1.tStart, blk2.tStart)
            minEnd = min(blk1.tEnd, blk2.tEnd)
            if maxStart < minEnd:
                overlapCnt += minEnd - maxStart
    return overlapCnt

def pslTSimilarity(psl1, psl2):
    assert psl1.tStrand == psl2.tStrand
    return (2 * _countOverlap(psl1, psl2)) / (psl1.basesAligned() + psl2.basesAligned())

###
# reporting
###
def writeReportRow(fh, geneSymbol, geneId, transcriptId, annotMethod, coords, annotMapId,
                   category, srcSize, insertBases, deleteBases,
                   annotType, annotDesc):
    # header god through this function to, rearrange order for easier
    # human inspection here
    fileOps.prRowv(fh, geneSymbol, geneId, transcriptId, annotMethod, annotMapId,
                   annotType, annotDesc, category, srcSize, insertBases, deleteBases,
                   coords)

def writeReportHeader(fh):
    writeReportRow(fh, "geneSymbol", "geneId", "transcriptId", "annotMethod", "coords",
                   "annotMapId", "category", "srcSize", "insertBases", "deleteBases",
                   "annotType", "annotDesc")

def sumFeatureIndel(featIndels):
    insertBases = deleteBases = 0
    for featIndel in featIndels:
        if featIndel.indelType is FeatureIndelType.insert:
            insertBases += featIndel.length
        else:
            deleteBases += featIndel.length
    return insertBases, deleteBases

def analyzeSrcFeatureIndels(opts, annotLen, featIndels):
    "return (category, insertBases, deleteBases)"
    if len(featIndels) == 0:
        return (AnnotDiffCategory.complete, 0, 0)
    elif featIndels[0].indelType == FeatureIndelType.del_full:
        return (AnnotDiffCategory.deleted, 0, annotLen)
    else:
        insertBases, deleteBases = sumFeatureIndel(featIndels)
        isMajor = ((insertBases * deleteBases) / annotLen) >= opts.major_disrupt_threshold
        return (AnnotDiffCategory.major_diff if isMajor else AnnotDiffCategory.minor_diff,
                insertBases, deleteBases)

def _getSrcCoords(transPsl, annotDiff):
    # FIXME uses coords of whole transcript when deleted until mapping method figure out
    if annotDiff.coords is not None:
        return annotDiff.coords
    else:
        return pslTCoords(transPsl)

def reportAnnotDiffSrc(bag, uniprotAnnot, geneMeta, transcriptId, transPsl, annotDiff, reportFh):
    srcAnnot = annotDiff.srcAnnot
    annotRef = srcAnnot.annotRef
    coords = _getSrcCoords(transPsl, annotDiff)
    category, insertBases, deleteBases = analyzeSrcFeatureIndels(bag.opts, annotRef.annotSize, annotDiff.srcFeatureIndels)
    writeReportRow(reportFh, geneMeta.geneSymbol, geneMeta.geneId, transcriptId, AnnotMethod.uniprotMap,
                   coords, annotRef.annotMapId,
                   category, annotRef.annotSize, insertBases, deleteBases,
                   uniprotAnnot.shortFeatType, uniprotAnnot.comment)

def analyzeTargetFeatureOverlap(opts, annotDiff, targetAnnot, uniprotAnnot):
    "return category"
    if annotDiff.srcAnnot is None:
        return AnnotDiffCategory.inserted
    sim = pslTSimilarity(targetAnnot.annotPsl, annotDiff.srcAnnot.annotPsl)
    assert sim > 0.0
    if sim >= opts.major_overlap_threshold:
        return AnnotDiffCategory.major_overlap
    else:
        return AnnotDiffCategory.minor_overlap

def reportAnnotDiffTarget(bag, geneMeta, transcriptId, annotDiff, uniprotAnnot, targetAnnot, reportFh):
    annotRef = targetAnnot.annotRef
    interproAnnot = bag.getInterproAnnot(annotRef.annotMapId)
    category = analyzeTargetFeatureOverlap(bag.opts, annotDiff, targetAnnot, uniprotAnnot)
    writeReportRow(reportFh, geneMeta.geneSymbol, geneMeta.geneId, transcriptId, AnnotMethod.interpro,
                   targetAnnot.coords, annotRef.annotMapId,
                   category, annotRef.annotSize, 0, 0,
                   interproAnnot.interpro_accession, interproAnnot.interpro_description)

def reportAnnotDiffsTarget(bag, geneMeta, transcriptId, annotDiff, uniprotAnnot, reportFh):
    for targetAnnot in annotDiff.targetAnnots:
        reportAnnotDiffTarget(bag, geneMeta, transcriptId, annotDiff, uniprotAnnot, targetAnnot, reportFh)

def reportAnnotDiff(bag, geneMeta, transcriptId, transPsl, annotDiff, reportFh):
    uniprotAnnot = None
    if annotDiff.srcAnnot is not None:
        uniprotAnnot = bag.getUniprotAnnot(annotDiff.srcAnnot.annotRef.annotMapId)
        reportAnnotDiffSrc(bag, uniprotAnnot, geneMeta, transcriptId, transPsl, annotDiff, reportFh)
    if len(annotDiff.targetAnnots) > 0:
        reportAnnotDiffsTarget(bag, geneMeta, transcriptId, annotDiff, uniprotAnnot, reportFh)

def reportTransAnalysis(bag, transIdChrom, transAnnotDiffs, reportFh):
    transcriptId = transIdChrom[0]
    geneMeta = bag.targetGeneSet.meta.getGeneByTranscriptId(transcriptId)
    for annotDiff in transAnnotDiffs:
        reportAnnotDiff(bag, geneMeta, transcriptId, transAnnotDiffs.transPsl,
                        annotDiff, reportFh)

###
# analysis
###
def analyzeTranscript(bag, transIdChrom):
    srcTransAnnotMappings = bag.srcAnnotSet.annotMappingsTbl.findEntry(*transIdChrom)
    targetTransAnnotMappings = bag.targetAnnotSet.annotMappingsTbl.findEntry(*transIdChrom)
    return compareTransAnnotations(srcTransAnnotMappings,
                                   targetTransAnnotMappings)


def analyzeTranscripts(bag, reportFh):
    writeReportHeader(reportFh)

    for transIdChrom in bag.getAllTransIdChroms():
        transAnnotDiffs = analyzeTranscript(bag, transIdChrom)
        reportTransAnalysis(bag, transIdChrom, transAnnotDiffs, reportFh)

###
# main
###
def xspeciesAnalyze(opts,
                    uniprotAnnotTsv, uniprotAnnot2GenomePsl, uniprotAnnot2GenomeRefTsv,
                    targetGeneSet, targetGeneMeta, targetTrans2GenomePsl,
                    interproAnnotTsv, interproAnnot2GenomePsl, interproAnnot2GenomeRefTsv,
                    annotTypeAssocTsv, analysisReportTsv):
    annotAssocs = annotAssocLoad(annotTypeAssocTsv)
    targetGeneSet = geneSetFactory(targetGeneSet, geneSetMetadata=targetGeneMeta,
                                   trans2GenomePslFile=targetTrans2GenomePsl)
    srcAnnotSet = srcAnnotSetLoad(uniprotAnnotTsv, uniprotAnnot2GenomePsl, uniprotAnnot2GenomeRefTsv,
                                  annotAssocs, targetGeneSet)
    targetAnnotSet = targetAnnotSetLoad(interproAnnotTsv, interproAnnot2GenomePsl, interproAnnot2GenomeRefTsv,
                                        annotAssocs, targetGeneSet)
    bag = DataBag(opts=opts, annotAssocs=annotAssocs,
                  targetGeneSet=targetGeneSet, srcAnnotSet=srcAnnotSet,
                  targetAnnotSet=targetAnnotSet)
    with fileOps.opengz(analysisReportTsv, 'w') as reportFh:
        analyzeTranscripts(bag, reportFh)

###
def main():
    opts, args = parseArgs()
    with cli.ErrorHandler():
        xspeciesAnalyze(opts,
                        args.uniprotAnnotTsv, args.uniprotAnnot2GenomePsl, args.uniprotAnnot2GenomeRefTsv,
                        args.geneSetName, args.geneSetMetadata, args.trans2GenomePsl,
                        args.interproAnnotTsv, args.interproAnnot2GenomePsl, args.interproAnnot2GenomeRefTsv,
                        args.annotTypeAssocTsv, args.analysisReportTsv)

main()
