#!/usr/bin/env python3
import argparse
import graphlib

from pycbio.sys.symEnum import SymEnum, auto
from pycbio.sys import cmdOps

class What(SymEnum):
    prot_trans_map = auto()
    uniprot_annot = auto()
    xspecies_trans_map = auto()
    xspecies_annot = auto()
    interpro_annot = auto()
    xspecies_compare = auto()

titles = {
    What.prot_trans_map: "Protein-transcript Map",
    What.uniprot_annot: "Uniprot Annotation Map",
    What.xspecies_trans_map: "Cross-species Protein Map",
    What.xspecies_annot: "Cross-species Annotation Map",
    What.interpro_annot: "IntrProScan Annotation",
    What.xspecies_compare: "Cross-species Compare",
}

def _parse_args():
    desc = "generate graph of data flow"
    parser = argparse.ArgumentParser(description=desc)
    parser.add_argument("--page",
                        help="output page, in inches in the form x,y")
    parser.add_argument("--keep", action='store_true',
                        help="get dot file")
    parser.add_argument("what", choices=What, type=What)
    parser.add_argument("outfile",
                        help="output file, extension is .pdf or .png, which determines type")
    opts, args = cmdOps.parse(parser)
    graphlib.check_output_file_type(parser, args.outfile)
    return opts, args

###
# programs
###
prog_interproAnnotsMap = 'interproAnnotsMap'
prog_interproAnnotsToDecorators = 'interproAnnotsToDecorators'
prog_interproProteinTranscriptAlign = 'interproProteinTranscriptAlign'
prog_proteinTranscriptAlignJob = 'proteinTranscriptAlignJob'
prog_uniprotAnnotsMap = 'uniprotAnnotsMap'
prog_uniprotAnnotsToDecorators = 'uniprotAnnotsToDecorators'
prog_uniprotDecoratorsMerge = 'uniprotDecoratorsMerge'
prog_uniprotInfo = 'uniprotInfo'
prog_uniprotProteinTranscriptAlign = 'uniprotProteinTranscriptAlign'
prog_uniprotProteinTranscriptMap = 'uniprotProteinTranscriptMap'
prog_xspeciesCompare = 'xspeciesCompare'
prog_xspeciesGencode2CatFilter = 'xspeciesGencode2CatFilter'
prog_xspeciesTrans2GenomeMap = 'xspeciesTrans2GenomeMap'
prog_xspeciesTrans2TransMap = 'xspeciesTrans2TransMap'
prog_xspeciesGencode2CatFilter = 'xspeciesGencode2CatFilter'
prog_blat = 'blat'

##
# data
##
data_uniprotMetaTsv = 'uniprotMeta.tsv'
data_protFa = 'protein.fa'
data_transFa = 'trans.fa'
data_trans2GenomePsl = 'trans2Genome.psl'
data_prot2TransPairedPsl = 'prot2TransPaired.psl'
data_prot2CanonTransPsl = 'prot2CanonTrans.psl'
data_annotDecoratorBed = 'annotDecorator.bed'
data_annot2GenomePsl = 'annot2Genome.psl'
data_annot2TransRefTsv = 'annot2TransRef.tsv'
data_annot2TransPsl = 'annot2Trans.psl'
data_uniprotAnnotsTsv = 'uniprotAnnots.tsv'
data_targetProtFa = 'targetProtein.fa'
data_targetTransFa = 'targetTrans.fa'

data_annot2TargetGenomePsl = "annot2TargetGenome.psl"
data_annot2TargetTransPsl = "annot2TargetTrans.psl"
data_annot2TargetTransRefTsv = "annot2TargetTransRef.tsv"

data_targetTrans2GenomePsl = "targetTrans2Genome.psl"
data_src2TargetGenomeChains = "src2TargetGenome.chain"
data_trans2TargetGenomePsl = "trans2TargetGenome.psl"
data_trans2TargetTransPsl = "trans2TargetTrans.psl"

data_interproAnnotTsv = "interproAnnot.tsv"
data_interproAnnot2TransPsl = "interproAnnot2Trans.psl"
data_interproAnnot2TransRefTsv = "interproAnnot2TransRef.tsv"
data_interproAnnot2GenomePsl = "interproAnnot2Genome.psl"
data_interproAnnotDecoratorBed = "interproAnnotDecorator.bed"

# more specific src name for xspecics compare
data_srcAnnot2SrcTransPsl = "srcAnnot2SrcTrans.psl"
data_srcTrans2TargetGenomePsl = "srcTrans2TargetGenome.psl"
data_targetTrans2TargetGenomePsl = "targetTransTargetGenome.psl"
data_srcAnnot2TargetTransPsl = "srcAnnot2TargetTrans.psl"
data_srcTrans2TargetTransPsl = "srcTirans2TargetTrans.psl"

##
# within assemble
##
def _task_proten_transcript_align(graph):
    graph.add_task(prog_uniprotProteinTranscriptAlign,
                   extins=(data_uniprotMetaTsv,
                           data_protFa,
                           data_transFa),
                   outputs=(data_prot2CanonTransPsl,))

def _task_protein_transcript_map(graph):
    graph.add_task(prog_uniprotProteinTranscriptMap,
                   extins=(data_uniprotMetaTsv,),
                   inputs=(data_prot2CanonTransPsl,),
                   outputs=(data_prot2TransPairedPsl,))

def _task_uniprot_annots_map(graph):
    graph.add_task(prog_uniprotAnnotsMap,
                   extins=(data_trans2GenomePsl,
                           data_uniprotAnnotsTsv,),
                   inputs=(data_prot2TransPairedPsl,),
                   outputs=(data_annot2GenomePsl,
                            data_annot2TransRefTsv))

def _task_uniprot_annots_to_decorators(graph):
    graph.add_task(prog_uniprotAnnotsToDecorators,
                   extins=(data_trans2GenomePsl,
                           data_uniprotMetaTsv,
                           data_uniprotAnnotsTsv),
                   inputs=(data_annot2GenomePsl,
                           data_annot2TransRefTsv),
                   outputs=(data_annotDecoratorBed,))

##
# xspecies
##
def _task_xspecies_transmap(graph):
    graph.add_task(prog_xspeciesTrans2GenomeMap,
                   extins=(data_trans2GenomePsl,
                           data_src2TargetGenomeChains),
                   outputs=(data_trans2TargetGenomePsl,))
    graph.add_task(prog_xspeciesTrans2TransMap,
                   extins=(data_trans2TargetGenomePsl,
                           data_targetTrans2GenomePsl,))
    graph.graph.edge(prog_xspeciesTrans2TransMap,
                     prog_xspeciesGencode2CatFilter)
    graph.add_task(prog_xspeciesGencode2CatFilter,
                   outputs=(data_trans2TargetTransPsl,))

def _task_uniprot_annots_xspecies_map(graph):
    graph.add_task(prog_uniprotAnnotsMap,
                   extins=(data_targetTrans2GenomePsl,
                           data_uniprotAnnotsTsv),
                   inputs=(data_trans2TargetTransPsl,
                           data_prot2TransPairedPsl),
                   outputs=(data_annot2TargetGenomePsl,
                            data_annot2TargetTransRefTsv,
                            data_annot2TargetTransPsl))

def _task_uniprot_annots_to_xspecies_decorators(graph):
    graph.add_task(prog_uniprotAnnotsToDecorators,
                   extins=(data_targetTrans2GenomePsl,
                           data_uniprotMetaTsv,
                           data_uniprotAnnotsTsv),
                   inputs=(data_annot2TargetGenomePsl,
                           data_annot2TransRefTsv,
                           data_annot2TransPsl),
                   outputs=(data_annotDecoratorBed,))

def _task_interpro_annots_to_decorators(graph):
    graph.add_task(prog_interproProteinTranscriptAlign,
                   extins=(data_targetProtFa,
                           data_targetTransFa),
                   outputs=(data_prot2TransPairedPsl,))
    graph.add_task(prog_interproAnnotsMap,
                   extins=(data_interproAnnotTsv,),
                   inputs=(data_targetTrans2GenomePsl,
                           data_prot2TransPairedPsl,
                           data_interproAnnot2TransRefTsv),
                   outputs=(data_interproAnnot2GenomePsl,
                            data_interproAnnot2TransPsl))
    graph.add_task(prog_interproAnnotsToDecorators,
                   extins=(data_interproAnnotTsv,),
                   inputs=(data_interproAnnot2TransRefTsv,
                           data_interproAnnot2GenomePsl),
                   outputs=(data_interproAnnotDecoratorBed,))


def _task_xspecies_compare(graph):
    graph.add_task(prog_xspeciesCompare,
                   extins=(data_uniprotMetaTsv,
                           data_interproAnnotTsv),
                   inputs=(data_srcAnnot2SrcTransPsl,
                           data_srcTrans2TargetGenomePsl,
                           data_targetTrans2TargetGenomePsl,
                           data_srcAnnot2TargetTransPsl,
                           data_srcTrans2TargetTransPsl,
                           data_interproAnnot2TransPsl,
                           data_interproAnnot2GenomePsl,))

def _graph_prot_trans_map(graph):
    _task_proten_transcript_align(graph)
    _task_protein_transcript_map(graph)

def _graph_uniprot_annot(graph):
    _task_uniprot_annots_map(graph)
    _task_uniprot_annots_to_decorators(graph)

def _graph_xspecies_trans_map(graph):
    _task_xspecies_transmap(graph)

def _graph_xspecies_annot(graph):
    _task_uniprot_annots_xspecies_map(graph)
    _task_uniprot_annots_to_xspecies_decorators(graph)

def _graph_interpro_annot(graph):
    _task_interpro_annots_to_decorators(graph)

def _graph_xspecies_compare(graph):
    _task_xspecies_compare(graph)

##
# main functions
##
def mkFlowGraph(opts, what, outfile):
    graph = graphlib.GraphBuilder(titles[what], outfile, opts.page)
    if what is What.prot_trans_map:
        _graph_prot_trans_map(graph)
    elif what is What.uniprot_annot:
        _graph_uniprot_annot(graph)
    elif what is What.xspecies_trans_map:
        _graph_xspecies_trans_map(graph)
    elif what is What.xspecies_annot:
        _graph_xspecies_annot(graph)
    elif what is What.interpro_annot:
        _graph_interpro_annot(graph)
    elif what is What.xspecies_compare:
        _graph_xspecies_compare(graph)
    graph.render(opts.keep)

def _main():
    opts, args = _parse_args()
    mkFlowGraph(opts, args.what, args.outfile)

_main()
