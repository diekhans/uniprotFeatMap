#!/usr/bin/env python3
import argparse
import os.path as osp
import graphviz as gv  # pip install graphviz


def _parse_args():
    desc = "generate graph of data flow"
    parser = argparse.ArgumentParser(description=desc)
    parser.add_argument("--size",
                        help="output size, in inches in the form x,y")
    parser.add_argument("--keep", action='store_true',
                        help="get dot file")
    parser.add_argument("outfile",
                        help="output file, extension is .pdf or .png, which determines type")
    args = parser.parse_args()
    if _get_output_format(args.outfile) not in gv.FORMATS:
        parser.error("output file must end in one of the format extensions: {} ".format(", ".join(gv.FORMATS)))
    return args

###
# programs
###
prog_interproAnnotsMap = 'interproAnnotsMap'
prog_interproAnnotsToDecorators = 'interproAnnotsToDecorators'
prog_interproProteinTranscriptAlign = 'interproProteinTranscriptAlign'
prog_proteinTranscriptAlignJob = 'proteinTranscriptAlignJob'
prog_uniprotAnnotsMap = 'uniprotAnnotsMap'
prog_uniprotAnnotsToDecorators = 'uniprotAnnotsToDecorators'
prog_uniprotDecoratorsMerge = 'uniprotDecoratorsMerge'
prog_uniprotInfo = 'uniprotInfo'
prog_uniprotProteinTranscriptAlign = 'uniprotProteinTranscriptAlign'
prog_uniprotProteinTranscriptMap = 'uniprotProteinTranscriptMap'
prog_xspeciesCompare = 'xspeciesCompare'
prog_xspeciesGencode2CatFilter = 'xspeciesGencode2CatFilter'
prog_xspeciesTrans2TransMap = 'xspeciesTrans2TransMap'
prog_blat = 'blat'

##
# data
##
data_uniprotMetaTsv = 'uniprotMeta.tsv'
data_proteinFa = 'protein.fa'
data_transFa = 'trans.fa'
data_protCanonTransPsl = 'protCanonTrans.psl'
data_annotDecoratorBed = 'annotDecorator.bed'
data_annotGenomePsl = 'annotGenome.psl'
data_annotTransRefTsv = 'annotTransRef.tsv'
data_cdsTransPairedPsl = 'cdsTransPaired.psl'
data_transGenomePsl = 'transGenome.psl'
data_uniprotAnnotsTsv = 'uniprotAnnots.tsv'
data_xspeciesTransPsl = 'xspeciesTrans.psl'


###
# graphviz
###
class GraphBuilder:
    def __init__(self, title, fmt, size=None):
        fontname = "helvetica"
        graph_attr = {"fontname": fontname}
        if size is not None:
            graph_attr["size"] = size
        node_attr = {"fontname": fontname}
        edge_attr = {"fontname": fontname}
        self.graph = gv.Digraph(
            title,
            format=fmt,
            graph_attr=graph_attr,
            node_attr=node_attr,
            edge_attr=edge_attr)
        self.data_files = set()

    def ensure_optional_data_file(self, name):
        "create an data file node, if it does not already exist"
        if name not in self.data_files:
            self.graph.node(name, label=name,
                            shape="cylinder",
                            style="dashed,filled",
                            fillcolor="yellow",
                            fontcolor="black")
            self.data_files.add(name)

    def ensure_data_file(self, name):
        "create an data file node, if it does not already exist"
        if name not in self.data_files:
            self.graph.node(name, label=name,
                            shape="cylinder",
                            style="filled",
                            fillcolor="cyan",
                            fontcolor="black")
            self.data_files.add(name)

    def ensure_data_files(self, names):
        for name in names:
            self.ensure_data_file(name)

    def add_task(self, name, inputs=(), outputs=()):
        "create a task node, inputs and outputs are other node names"
        label = name.replace(" ", "\\n")
        self.graph.node(name, label=label,
                        shape="box",
                        style="filled",
                        fillcolor="maroon",
                        fontcolor="white")
        for n in inputs:
            self.ensure_data_file(n)
            self.graph.edge(n, name)
        for n in outputs:
            self.ensure_data_file(n)
            self.graph.edge(name, n)

    def add_program(self, name, inputs=(), outputs=()):
        self.graph.node(name,
                        label=name,
                        shape="trapezium",
                        style="filled",
                        fillcolor="darkgreen",
                        fontcolor="white")
        for n in inputs:
            self.ensure_data_file(n)
            self.graph.edge(n, name)
        for n in outputs:
            self.ensure_data_file(n)
            self.graph.edge(name, n)

    def cluster(self, name):
        invis = {"style": "invis"}
        return self.graph.subgraph(name="cluster_" + name, graph_attr=invis)

    def group(self, name):
        return self.graph.subgraph(name="relevant")

    def render(self, out_base, keep=False):
        self.graph.render(out_base, cleanup=not keep)

##
# processing definitions
##
def _task_proten_transcript_align(graph):
    graph.add_task(prog_uniprotProteinTranscriptAlign,
                   (data_uniprotMetaTsv, data_proteinFa, data_transFa),
                   (data_protCanonTransPsl,))

def _task_protein_transcript_map(graph):
    graph.add_task(prog_uniprotProteinTranscriptMap,
                   (data_uniprotMetaTsv, data_protCanonTransPsl),
                   (data_cdsTransPairedPsl,))

def _task_uniprot_annots_map(graph):
    graph.ensure_optional_data_file(data_xspeciesTransPsl)
    graph.add_task(prog_uniprotAnnotsMap,
                   (data_transGenomePsl, data_uniprotAnnotsTsv, data_cdsTransPairedPsl, data_xspeciesTransPsl),
                   (data_annotGenomePsl, data_annotTransRefTsv))

def _task_uniprot_annots_to_decorators(graph):
    graph.add_task(prog_uniprotAnnotsToDecorators,
                   (data_transGenomePsl, data_uniprotMetaTsv, data_uniprotAnnotsTsv,
                    data_annotGenomePsl, data_annotTransRefTsv),
                   (data_annotDecoratorBed,))


def _construct_graph(graph):
    _task_proten_transcript_align(graph)
    _task_protein_transcript_map(graph)
    _task_uniprot_annots_map(graph)
    _task_uniprot_annots_to_decorators(graph)

##
# main functions
##

def _build_graph(fmt, size=None):
    fontname = "helvetica"
    graph_attr = {"fontname": fontname}
    if size is not None:
        graph_attr["size"] = size
    node_attr = {"fontname": fontname}
    edge_attr = {"fontname": fontname}
    graph = gv.Digraph(
        "uniprotFeatMap flow",
        format=fmt,
        graph_attr=graph_attr,
        node_attr=node_attr,
        edge_attr=edge_attr)
    _construct_graph(graph)
    return graph

def _get_output_format(outfile):
    return osp.splitext(outfile)[1][1:]

def mkFlowGraph(size, keep, outfile):
    fmt = _get_output_format(outfile)
    graph = GraphBuilder("uniprotFeatMap", fmt, size)
    _construct_graph(graph)
    graph.render(osp.splitext(outfile)[0], keep)

def _main():
    args = _parse_args()
    mkFlowGraph(args.size, args.keep, args.outfile)

_main()
