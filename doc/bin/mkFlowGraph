#!/usr/bin/env python3
import argparse
import graphlib


def _parse_args():
    desc = "generate graph of data flow"
    parser = argparse.ArgumentParser(description=desc)
    parser.add_argument("--xspecies", action="store_true",
                        help="cross-species mapping diagram")
    parser.add_argument("--size",
                        help="output size, in inches in the form x,y")
    parser.add_argument("--keep", action='store_true',
                        help="get dot file")
    parser.add_argument("outfile",
                        help="output file, extension is .pdf or .png, which determines type")
    args = parser.parse_args()
    graphlib.check_output_file_type(parser, args.outfile)
    return args

###
# programs
###
prog_interproAnnotsMap = 'interproAnnotsMap'
prog_interproAnnotsToDecorators = 'interproAnnotsToDecorators'
prog_interproProteinTranscriptAlign = 'interproProteinTranscriptAlign'
prog_proteinTranscriptAlignJob = 'proteinTranscriptAlignJob'
prog_uniprotAnnotsMap = 'uniprotAnnotsMap'
prog_uniprotAnnotsToDecorators = 'uniprotAnnotsToDecorators'
prog_uniprotDecoratorsMerge = 'uniprotDecoratorsMerge'
prog_uniprotInfo = 'uniprotInfo'
prog_uniprotProteinTranscriptAlign = 'uniprotProteinTranscriptAlign'
prog_uniprotProteinTranscriptMap = 'uniprotProteinTranscriptMap'
prog_xspeciesCompare = 'xspeciesCompare'
prog_xspeciesGencode2CatFilter = 'xspeciesGencode2CatFilter'
prog_xspeciesTrans2TransMap = 'xspeciesTrans2TransMap'
prog_xspeciesGencode2CatFilter = 'xspeciesGencode2CatFilter'
prog_blat = 'blat'

##
# data
##
data_uniprotMetaTsv = 'uniprotMeta.tsv'
data_protFa = 'protein.fa'
data_transFa = 'trans.fa'
data_trans2GenomePsl = 'trans2Genome.psl'
data_prot2TransPairedPsl = 'prot2TransPaired.psl'
data_prot2CanonTransPsl = 'prot2CanonTrans.psl'
data_annotDecoratorBed = 'annotDecorator.bed'
data_annot2GenomePsl = 'annot2Genome.psl'
data_annot2TransRefTsv = 'annot2TransRef.tsv'
data_annot2TransPsl = 'annot2Trans.psl'
data_uniprotAnnotsTsv = 'uniprotAnnots.tsv'

data_xspeciesTrans2TransPsl = 'xspeciesTrans2Trans.psl'
data_src2TargetGenomeChains = "src2TargetGenome.chain"
data_srcTrans2TargetGenomePsl = "srcTrans2TargetGenome.psl"
data_targetTrans2GenomePsl = "targetTrans2Genome.psl"
data_srcTrans2TargetTransPsl = "srcTrans2TargetTrans.psl"
data_annot2TargetGenomePsl = "annot2TargetGenome.psl"
data_annot2TargetTransPsl = "annot2TargetTrans.psl"
data_annot2TargetTransRefTsv = "annot2TargetTransRef.tsv"

##
# within assemble
##
def _task_proten_transcript_align(graph):
    graph.add_task(prog_uniprotProteinTranscriptAlign,
                   (data_uniprotMetaTsv, data_protFa, data_transFa),
                   (),
                   (data_prot2CanonTransPsl,))

def _task_protein_transcript_map(graph):
    graph.add_task(prog_uniprotProteinTranscriptMap,
                   (data_uniprotMetaTsv,),
                   (data_prot2CanonTransPsl,),
                   (data_prot2TransPairedPsl,))

def _task_uniprot_annots_map(graph):
    graph.add_task(prog_uniprotAnnotsMap,
                   (data_trans2GenomePsl, data_uniprotAnnotsTsv, data_prot2TransPairedPsl),
                   (),
                   (data_annot2GenomePsl, data_annot2TransRefTsv))

def _task_uniprot_annots_to_decorators(graph):
    graph.add_task(prog_uniprotAnnotsToDecorators,
                   (data_trans2GenomePsl, data_uniprotMetaTsv, data_uniprotAnnotsTsv),
                   (data_annot2GenomePsl, data_annot2TransRefTsv),
                   (data_annotDecoratorBed,))

##
# xspecies
##
def _task_xspecies_transmap(graph):
    graph.add_task(prog_xspeciesTrans2TransMap,
                   (data_trans2GenomePsl, data_src2TargetGenomeChains, data_targetTrans2GenomePsl),
                   (), ())
    graph.graph.edge(prog_xspeciesTrans2TransMap,
                     prog_xspeciesGencode2CatFilter)
    graph.add_task(prog_xspeciesGencode2CatFilter,
                   (), (),
                   (data_srcTrans2TargetTransPsl,))

def _task_uniprot_annots_xspecies_map(graph):
    graph.add_task(prog_uniprotAnnotsMap,
                   (data_trans2GenomePsl, data_uniprotAnnotsTsv, data_xspeciesTrans2TransPsl),
                   (data_srcTrans2TargetTransPsl, data_prot2TransPairedPsl),
                   (data_annot2TargetGenomePsl, data_annot2TargetTransRefTsv, data_annot2TargetTransPsl))

def _task_uniprot_annots_to_xspecies_decorators(graph):
    graph.add_task(prog_uniprotAnnotsToDecorators,
                   (data_targetTrans2GenomePsl, data_uniprotMetaTsv, data_uniprotAnnotsTsv),
                   (data_annot2TargetGenomePsl, data_annot2TransRefTsv),
                   (data_annotDecoratorBed,))

def _task_xspecies_compare(graph):
    graph.add_task(prog_xspeciesCompare, (),
                   (data_srcTrans2TargetGenomePsl, data_annot2TransPsl,
                    data_targetTrans2GenomePsl, data_annot2TargetTransPsl),
                   ())

def _construct_graph(graph, xspecies):
    _task_proten_transcript_align(graph)
    _task_protein_transcript_map(graph)
    if xspecies:
        _task_xspecies_transmap(graph)
        _task_uniprot_annots_xspecies_map(graph)
        _task_uniprot_annots_to_xspecies_decorators(graph)
        _task_xspecies_compare(graph)
    else:
        _task_uniprot_annots_map(graph)
        _task_uniprot_annots_to_decorators(graph)

##
# main functions
##

def mkFlowGraph(size, keep, xspecies, outfile):
    if xspecies:
        title = "Cross-assembly Uniprot Feature Mapping"
    else:
        title = "Uniprot Feature Mapping"
    graph = graphlib.GraphBuilder(title, outfile, size)
    _construct_graph(graph, xspecies)
    graph.render(keep)

def _main():
    args = _parse_args()
    mkFlowGraph(args.size, args.keep, args.xspecies, args.outfile)

_main()
