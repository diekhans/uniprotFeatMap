#!/usr/bin/env python3
import argparse
import graphlib


def _parse_args():
    desc = "generate graph of data flow"
    parser = argparse.ArgumentParser(description=desc)
    parser.add_argument("--xspecies", action="store_true",
                        help="cross-species mapping diagram")
    parser.add_argument("--size",
                        help="output size, in inches in the form x,y")
    parser.add_argument("--keep", action='store_true',
                        help="get dot file")
    parser.add_argument("outfile",
                        help="output file, extension is .pdf or .png, which determines type")
    args = parser.parse_args()
    graphlib.check_output_file_type(parser, args.outfile)
    return args

###
# programs
###
prog_interproAnnotsMap = 'interproAnnotsMap'
prog_interproAnnotsToDecorators = 'interproAnnotsToDecorators'
prog_interproProteinTranscriptAlign = 'interproProteinTranscriptAlign'
prog_proteinTranscriptAlignJob = 'proteinTranscriptAlignJob'
prog_uniprotAnnotsMap = 'uniprotAnnotsMap'
prog_uniprotAnnotsToDecorators = 'uniprotAnnotsToDecorators'
prog_uniprotDecoratorsMerge = 'uniprotDecoratorsMerge'
prog_uniprotInfo = 'uniprotInfo'
prog_uniprotProteinTranscriptAlign = 'uniprotProteinTranscriptAlign'
prog_uniprotProteinTranscriptMap = 'uniprotProteinTranscriptMap'
prog_xspeciesCompare = 'xspeciesCompare'
prog_xspeciesGencode2CatFilter = 'xspeciesGencode2CatFilter'
prog_xspeciesTrans2TransMap = 'xspeciesTrans2TransMap'
prog_blat = 'blat'

##
# data
##
data_uniprotMetaTsv = 'uniprotMeta.tsv'
data_proteinFa = 'protein.fa'
data_transFa = 'trans.fa'
data_transGenomePsl = 'transGenome.psl'
data_protCdsTransPairedPsl = 'cdsTransPaired.psl'
data_protCanonTransPsl = 'protCanonTrans.psl'
data_annotDecoratorBed = 'annotDecorator.bed'
data_annotGenomePsl = 'annotGenome.psl'
data_annotTransRefTsv = 'annotTransRef.tsv'
data_annotTransPsl = 'annotTrans.psl'
data_uniprotAnnotsTsv = 'uniprotAnnots.tsv'
data_xspeciesTransPsl = 'xspeciesTrans.psl'


##
# processing definitions
##
def _task_proten_transcript_align(graph):
    graph.add_task(prog_uniprotProteinTranscriptAlign,
                   (data_uniprotMetaTsv, data_proteinFa, data_transFa),
                   (data_protCanonTransPsl,))

def _task_protein_transcript_map(graph):
    graph.add_task(prog_uniprotProteinTranscriptMap,
                   (data_uniprotMetaTsv, data_protCanonTransPsl),
                   (data_protCdsTransPairedPsl,))

def _task_uniprot_annots_map(graph):
    graph.add_task(prog_uniprotAnnotsMap,
                   (data_transGenomePsl, data_uniprotAnnotsTsv),
                   (data_annotGenomePsl, data_annotTransRefTsv))

def _task_uniprot_annots_xspecies_map(graph):
    graph.add_task(prog_uniprotAnnotsMap,
                   (data_transGenomePsl, data_uniprotAnnotsTsv, data_protCdsTransPairedPsl, data_xspeciesTransPsl),
                   (data_annotGenomePsl, data_annotTransRefTsv, data_annotTransPsl))

def _task_uniprot_annots_to_decorators(graph):
    graph.add_task(prog_uniprotAnnotsToDecorators,
                   (data_transGenomePsl, data_uniprotMetaTsv, data_uniprotAnnotsTsv,
                    data_annotGenomePsl, data_annotTransRefTsv),
                   (data_annotDecoratorBed,))

def _construct_graph(graph, xspecies):
    _task_proten_transcript_align(graph)
    _task_protein_transcript_map(graph)
    if xspecies:
        _task_uniprot_annots_xspecies_map(graph)
    else:
        _task_uniprot_annots_map(graph)
        _task_uniprot_annots_to_decorators(graph)

##
# main functions
##

def mkFlowGraph(size, keep, xspecies, outfile):
    graph = graphlib.GraphBuilder("uniprotFeatMap", outfile, size)
    _construct_graph(graph, xspecies)
    graph.render(keep)

def _main():
    args = _parse_args()
    mkFlowGraph(args.size, args.keep, args.xspecies, args.outfile)

_main()
